def exists_unique (P : Œ± ‚Üí Prop) : Prop := (‚àÉ (x : Œ±), P x ‚àß (‚àÄ y : Œ±, (P y ‚Üí x = y)))
open Lean TSyntax.Compat in
macro "‚àÉ!" xs:explicitBinders ", " b:term : term => expandExplicitBinders ``exists_unique xs b
axiom Set : Type
axiom membership : Set ‚Üí Set ‚Üí Prop
infix:50 (priority := high) " ‚àà " => membership
infix:50 (priority := high) " ‚àâ " => (fun (x : Set) => (fun (y : Set) => ¬¨ membership x y))
-- we proved before
axiom eq_subst (P : Set ‚Üí Prop) : (‚àÄ (a b : Set), a = b ‚Üí P a ‚Üí P b)
axiom eq_symm (x y : Set) : (x = y) ‚Üí (y = x)
axiom iff_congr_pred_arg (P : Prop ‚Üí Prop) : (‚àÄ (x y : Prop), (x ‚Üî y) ‚Üí (P x ‚Üî P y))
axiom iff_subst_pred_arg (P : Prop ‚Üí Prop) : (‚àÄ (x y : Prop), (x ‚Üî y) ‚Üí (P x ‚Üí P y))
axiom pick_unique_P (P : Set ‚Üí Prop) (h : ‚àÉ! x, P x) : Set
axiom pick_unique_P_property (P : Set ‚Üí Prop) (h : ‚àÉ! x, P x) : P (pick_unique_P P h) ‚àß ‚àÄ x, x ‚â† pick_unique_P P h ‚Üí ¬¨P x
def forall_in_A (P : Set ‚Üí Prop) (A : Set) : Prop := (‚àÄ x, (x ‚àà A ‚Üí P x))
def exists_in_A (P : Set ‚Üí Prop) (A : Set) : Prop := (‚àÉ x, (x ‚àà A ‚àß P x))
def exists_uniq_in_A (P : Set ‚Üí Prop) (A : Set) : Prop := (‚àÉ! x, (x ‚àà A ‚àß P x))
declare_syntax_cat idents
syntax ident : idents
syntax ident idents : idents
syntax "‚àÄ" idents "‚àà" term ";" term : term
syntax "‚àÉ" idents "‚àà" term ";" term : term
syntax "‚àÉ!" idents "‚àà" term ";" term : term
macro_rules
  | `(‚àÄ $idnt:ident ‚àà $A:term; $b:term)  => `(forall_in_A (fun $idnt:ident => $b) $A)
  | `(‚àÄ $idnt:ident $idnts:idents ‚àà $A:term; $b:term) => `(forall_in_A (fun $idnt:ident => (‚àÄ $idnts:idents ‚àà $A; $b)) $A)
  | `(‚àÉ $idnt:ident ‚àà $A:term; $b:term)  => `(exists_in_A (fun $idnt:ident => $b) $A)
  | `(‚àÉ $idnt:ident $idnts:idents ‚àà $A:term; $b:term) => `(exists_in_A (fun $idnt:ident => (‚àÄ $idnts:idents ‚àà $A; $b)) $A)
  | `(‚àÉ! $idnt:ident ‚àà $A:term; $b:term)  => `(exists_uniq_in_A (fun $idnt:ident => $b) $A)
  | `(‚àÉ! $idnt:ident $idnts:idents ‚àà $A:term; $b:term) => `(exists_uniq_in_A (fun $idnt:ident => (‚àÄ $idnts:idents ‚àà $A; $b)) $A)
def empty (A : Set) : Prop := ‚àÄ b, (b ‚àâ A)
def non_empty (A : Set) : Prop := ‚àÉ b, (b ‚àà A)
def subset (A B : Set) : Prop := ‚àÄ x ‚àà A; x ‚àà B
def is_successor (m n : Set) : Prop := ‚àÄ x, (x ‚àà n ‚Üî x ‚àà m ‚à® x = m)
infix:50 (priority := high) " ‚äÜ " => subset
axiom subset_refl : ‚àÄ A, A ‚äÜ A
axiom subset_trans_curry : ‚àÄ A B C, A ‚äÜ B ‚Üí B ‚äÜ C ‚Üí A ‚äÜ C
axiom subset_trans_export : ‚àÄ A B C, A ‚äÜ B ‚àß B ‚äÜ C ‚Üí A ‚äÜ C
axiom empty_subset_any : ‚àÄ A B, empty A ‚Üí A ‚äÜ B
def set_equality (A B : Set) := ‚àÄ x, (x ‚àà A ‚Üî x ‚àà B)
axiom boolean : ‚àÄ A, ‚àÉ B, ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)
axiom extensionality : ‚àÄ A B, set_equality A B ‚Üí (A = B)
axiom exists_unique_empty : (‚àÉ! x, empty x)
axiom unique_unordered_pair : (‚àÄ a‚ÇÅ a‚ÇÇ, ‚àÉ! C, ‚àÄ x, (x ‚àà C ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ))
axiom unique_union : ‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî ‚àÉ y ‚àà A; x ‚àà y)
axiom unique_specification (P : Set ‚Üí Prop) : (‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî x ‚àà A ‚àß P x))
axiom unique_boolean : (‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A))
noncomputable def empty_set := pick_unique_P empty exists_unique_empty
noncomputable def unordered_pair_set : (Set ‚Üí Set ‚Üí Set) := fun (a‚ÇÅ : Set) => fun (a‚ÇÇ : Set) =>
  pick_unique_P (fun (B) => ‚àÄ x, (x ‚àà B ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) (unique_unordered_pair a‚ÇÅ a‚ÇÇ)
noncomputable def singleton_set : (Set ‚Üí Set) := fun (a) => unordered_pair_set a a
noncomputable def union_set : (Set ‚Üí Set) := fun (A) => pick_unique_P (fun (B) => ‚àÄ x, (x ‚àà B ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) (unique_union A)
noncomputable def specification_set (P : Set ‚Üí Prop) : (Set ‚Üí Set) :=
  fun (A) => pick_unique_P (fun (B) => (‚àÄ x, x ‚àà B ‚Üî x ‚àà A ‚àß P x)) (unique_specification P A)
notation (priority := high) "‚àÖ" => empty_set
notation (priority := high) "{" a‚ÇÅ ", " a‚ÇÇ "}" => unordered_pair_set a‚ÇÅ a‚ÇÇ
notation (priority := high) "{" a "}" => singleton_set a
notation (priority := high) "‚ãÉ" => union_set
syntax "{" ident "‚àà" term "|" term "}" : term
macro_rules
  | `({ $x:ident ‚àà $A:term | $property:term })  => `(specification_set (fun ($x) => $property) $A)
noncomputable def union_2sets (A B : Set) := ‚ãÉ {A, B}
infix:60 (priority:=high) " ‚à™ " => union_2sets
noncomputable def intersect_2sets (A B : Set) := {x ‚àà A | x ‚àà B}
infix:60 (priority:=high) " ‚à© " => intersect_2sets
noncomputable def difference (A B : Set) := {x ‚àà A | x ‚àâ B}
infix:60 (priority:=high) " \\ " => difference
noncomputable def symmetric_difference (A B : Set) := (A \ B) ‚à™ (B \ A)
infix:60 (priority:=high) " ‚ñ≥ " => symmetric_difference
noncomputable def intersection_set : Set ‚Üí Set := fun (A) => {x ‚àà ‚ãÉ A | ‚àÄ y ‚àà A; x ‚àà y}
notation (priority := high) "‚ãÇ" => intersection_set
declare_syntax_cat set_comprehension
syntax term "; " set_comprehension : set_comprehension
syntax term : set_comprehension
syntax "{" set_comprehension "}" : term
macro_rules
| `({$term1:term; $term2:term}) => `(unordered_pair_set $term1:term $term2:term)
| `({$elem:term; $rest:set_comprehension}) => `({$rest:set_comprehension} ‚à™ {$elem:term})
axiom empty_set_is_empty : empty ‚àÖ
axiom empty_set_is_subset_any : ‚àÄ A, ‚àÖ ‚äÜ A
axiom elem_in_singl : ‚àÄ x, x ‚àà {x}
axiom in_singl_elem : ‚àÄ a x, x ‚àà {a} ‚Üí x = a
axiom unordered_pair_set_is_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ x, x ‚àà {a‚ÇÅ, a‚ÇÇ} ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ
axiom unordered_pair_is_unordered : ‚àÄ a‚ÇÅ a‚ÇÇ, {a‚ÇÅ, a‚ÇÇ} = {a‚ÇÇ, a‚ÇÅ}
axiom union_set_is_union : (‚àÄ A x, (x ‚àà ‚ãÉ A ‚Üî ‚àÉ y ‚àà A; x ‚àà y))
axiom union_sing : ‚àÄ A, ‚ãÉ {A} = A
axiom intersection_set_is_intersection : ‚àÄ A x, x ‚àà ‚ãÇ A ‚Üî (x ‚àà ‚ãÉ A ‚àß ‚àÄ y ‚àà A; x ‚àà y)
axiom intersection_non_empty : ‚àÄ A, (A ‚â† ‚àÖ ‚Üí ‚àÄ x, (x ‚àà ‚ãÇ A) ‚Üî ‚àÄ y ‚àà A; x ‚àà y)
axiom specification_set_is_specification (P : Set ‚Üí Prop) : (‚àÄ A x, x ‚àà {x ‚àà A | P x} ‚Üî x ‚àà A ‚àß P x)
axiom specification_set_subset (P : Set ‚Üí Prop) : (‚àÄ A, {x ‚àà A | P x} ‚äÜ A)
axiom subset_then_equality : ‚àÄ A B, A ‚äÜ B ‚àß B ‚äÜ A ‚Üí A = B
axiom union2_sets_prop : (‚àÄ A B x, x ‚àà A ‚à™ B ‚Üî x ‚àà A ‚à® x ‚àà B)
axiom union2_sets_subset_prop : (‚àÄ A B, A ‚äÜ A ‚à™ B ‚àß B ‚äÜ A ‚à™ B)
axiom intersect_2sets_prop : (‚àÄ A B x, x ‚àà A ‚à© B ‚Üî x ‚àà A ‚àß x ‚àà B)
axiom intersect_2sets_subset_prop : ‚àÄ A B, (A ‚à© B ‚äÜ A) ‚àß (A ‚à© B ‚äÜ B)
axiom comp_2sets_subset_prop : ‚àÄ A B, A \ B ‚äÜ A
axiom difference_prop : (‚àÄ A B x, x ‚àà A \ B ‚Üî x ‚àà A ‚àß x ‚àâ B)
axiom left_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ, a‚ÇÅ ‚àà {a‚ÇÅ, a‚ÇÇ}
axiom right_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ, a‚ÇÇ ‚àà {a‚ÇÅ, a‚ÇÇ}
noncomputable def boolean_func_sym : Set ‚Üí Set :=
  fun (A : Set) => pick_unique_P (fun (B : Set) => ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)) (unique_boolean A)
notation (priority := high) "ùí´" => boolean_func_sym
theorem boolean_set_is_boolean : ‚àÄ A, (‚àÄ x, x ‚àà ùí´ A ‚Üî x ‚äÜ A) :=
  fun (A : Set) => And.left (pick_unique_P_property (fun (B : Set) => ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)) (unique_boolean A))
noncomputable def ordered_pair_set (a b : Set) := {{a}, {a, b}}
notation (priority := high) "(" a‚ÇÅ ", " a‚ÇÇ ")" => ordered_pair_set a‚ÇÅ a‚ÇÇ
theorem ordered_pair_set_prop : ‚àÄ a b c d, (a, b) = (c, d) ‚Üî (a = c ‚àß b = d) :=
  fun (a) => fun(b) => fun(c) => fun(d) =>
    Iff.intro
    (
      fun (h : (a, b) = (c, d)) =>
        let first: {a} ‚àà {{a}, {a, b}} := left_unordered_pair {a} {a, b}
        let second: {a} ‚àà {{c}, {c, d}} := eq_subst (fun (x) => {a} ‚àà x) (a, b) (c, d) h first
        let third: {a} = {c} ‚à® {a} = {c, d} := Iff.mp (unordered_pair_set_is_unordered_pair {c} {c, d} {a}) second
        let ac : a = c
        := Or.elim (third) (
          fun (g : {a} = {c}) =>
            let fourth: c ‚àà {c} := elem_in_singl c
            let fifth: c ‚àà {a} := eq_subst (fun (x) => c ‚àà x) {c} {a} (Eq.symm g) fourth
            Eq.symm (in_singl_elem a c fifth)
        ) (
          fun (g : {a} = {c, d}) =>
            let fourth: c ‚àà {c, d} := left_unordered_pair c d
            let fifth: c ‚àà {a} := eq_subst (fun (x) => c ‚àà x) {c, d} {a} (Eq.symm g) fourth
            Eq.symm (in_singl_elem a c fifth)

        )

        let fourth: {a, b} ‚àà {{a}, {a, b}} := right_unordered_pair {a} {a, b}
        let fifth: {a, b} ‚àà {{c}, {c, d}} := eq_subst (fun (x) => {a, b} ‚àà x) (a, b) (c, d) h fourth
        let sixth: {a, b} = {c} ‚à® {a, b} = {c, d} :=Iff.mp (unordered_pair_set_is_unordered_pair {c} {c, d} {a, b}) fifth
        Or.elim (sixth) (
            fun (g : {a, b} = {c}) =>
              let seventh : b ‚àà {a, b} := right_unordered_pair a b
              let eighth: b ‚àà {c} := eq_subst (fun (x) => b ‚àà x) {a, b} {c} g seventh
              let nineth: b = c := in_singl_elem c b eighth
              let tenth: {c, d} ‚àà {{c}, {c, d}} := right_unordered_pair {c} {c, d}
              let eleventh: {c, d} ‚àà {{a}, {a, b}} := eq_subst (fun (x) => {c, d} ‚àà x) (c, d) (a, b) (Eq.symm h) tenth
              let twelve: {c, d} = {a} ‚à® {c, d} = {a, b} := Iff.mp (unordered_pair_set_is_unordered_pair {a} {a, b} {c, d}) eleventh
              Or.elim (twelve)
              (
                fun (s : {c, d} = {a}) =>
                  let y‚ÇÅ : d ‚àà {c, d} := right_unordered_pair c d
                  let y‚ÇÇ : d ‚àà {a} := eq_subst (fun (x) => d ‚àà x) {c, d} {a} s y‚ÇÅ
                  let y‚ÇÉ : d = a := in_singl_elem a d y‚ÇÇ
                  let y‚ÇÑ : d = c := Eq.trans y‚ÇÉ ac
                  let y‚ÇÖ : b = d := Eq.trans nineth (Eq.symm y‚ÇÑ)
                  And.intro ac y‚ÇÖ
              )
              (
                fun (s : {c, d} = {a, b}) =>
                  let y‚ÇÅ: d ‚àà {c, d} := right_unordered_pair c d
                  let y‚ÇÇ : d ‚àà {a, b} := eq_subst (fun (x) => d ‚àà x) {c, d} {a, b} s y‚ÇÅ
                  let y‚ÇÉ : d = a ‚à® d = b := Iff.mp (unordered_pair_set_is_unordered_pair a b d) y‚ÇÇ
                  Or.elim (y‚ÇÉ)
                  (
                    fun (y‚ÇÑ : d = a) =>
                      let y‚ÇÖ : d = c := Eq.trans y‚ÇÑ ac
                      let y‚ÇÜ : b = d := Eq.trans nineth (Eq.symm y‚ÇÖ)
                      And.intro ac y‚ÇÜ
                  )
                  (
                    fun (y‚ÇÑ : d = b) =>
                      And.intro ac (Eq.symm y‚ÇÑ)
                  )
              )

        )
        (
          fun (g : {a, b} = {c, d}) =>
            let y‚ÇÅ : {c, d} = {a, d} := eq_subst (fun (x) => {c, d} = {x, d}) c a (Eq.symm ac) (Eq.refl {c, d})
            let y‚ÇÇ : {a, b} = {a, d} := Eq.trans g y‚ÇÅ
            let y‚ÇÉ : d ‚àà {a, d} := right_unordered_pair a d
            let y‚ÇÑ : d ‚àà {a, b} := eq_subst (fun (x) => d ‚àà x) {a, d} {a, b} (Eq.symm y‚ÇÇ) y‚ÇÉ
            let y‚ÇÖ := Iff.mp (unordered_pair_set_is_unordered_pair a b d) y‚ÇÑ
            Or.elim (y‚ÇÖ)
            (
              fun (y‚ÇÜ: d = a) =>
                let y‚Çá : d = c := Eq.trans y‚ÇÜ ac
                let y‚Çà : b ‚àà {a, b} := right_unordered_pair a b
                let y‚Çâ : b ‚àà {c, d} := eq_subst (fun (x) => b ‚àà x) {a, b} {c, d} g y‚Çà
                let t : b = c ‚à® b = d := Iff.mp (unordered_pair_set_is_unordered_pair c d b) y‚Çâ
                Or.elim (t)
                (
                  fun (u : b = c) =>
                    And.intro ac (Eq.trans (u) (Eq.symm y‚Çá))
                )
                (
                  fun (u : b = d) =>
                    And.intro ac u
                )
            )
            (
              fun (y‚ÇÜ : d = b) =>
                And.intro ac (Eq.symm y‚ÇÜ)
            )
        )

    )
    (
      fun (h : (a = c ‚àß b = d)) =>
        eq_subst (fun (x) => (a, b) = x) (c, b) (c, d)
        (eq_subst (fun (x) => (c, b) = (c, x)) b d (And.right h) (Eq.refl (c, b)))
        (eq_subst (fun (x) => (a, b) = (x, b)) a c (And.left h) (Eq.refl (a, b)))
    )
theorem ordered_pair_set_belonging: ‚àÄ A B, ‚àÄ a ‚àà A; ‚àÄ b ‚àà B; (a, b) ‚àà ùí´ (ùí´ (A ‚à™ B)) :=
    fun (A) => fun (B) => fun (a) => fun (g : (a ‚àà A)) =>
      fun (b) => fun (h : (b ‚àà B)) =>
        let first : ({a, b} ‚äÜ A ‚à™ B)
        := fun (x) => fun (s : (x ‚àà {a, b})) => Or.elim (Iff.mp (unordered_pair_set_is_unordered_pair a b x) s)  (fun (r : x = a) =>
                let second := eq_subst (fun (s) => s ‚àà A) (a) (x) (Eq.symm r) (g)
                let third := (Or.inl : (x ‚àà A) ‚Üí (x ‚àà A ‚à® x ‚àà B)) second
                Iff.mpr (union2_sets_prop A B x) third
          ) (fun (r : x = b) =>
                let second := eq_subst (fun (s) => s ‚àà B) (b) (x) (Eq.symm r) (h)
                let third := (Or.inr : (x ‚àà B) ‚Üí (x ‚àà A ‚à® x ‚àà B)) second
                Iff.mpr (union2_sets_prop A B x) third

          )

        let fourth : ({a} ‚äÜ A ‚à™ B) := fun (x) => fun (s : (x ‚àà {a})) => (
          let second := in_singl_elem a x s
          let third := eq_subst (fun (s) => s ‚àà A) (a) (x) (Eq.symm second) (g)
          let fourth := (Or.inl : (x ‚àà A) ‚Üí (x ‚àà A ‚à® x ‚àà B)) third
          Iff.mpr (union2_sets_prop A B x) fourth
        )

        let fifth : {a} ‚àà ùí´ (A ‚à™ B) := Iff.mpr (boolean_set_is_boolean (A ‚à™ B) {a}) (fourth)
        let sixth : {a, b} ‚àà ùí´ (A ‚à™ B) := Iff.mpr (boolean_set_is_boolean (A ‚à™ B) {a, b}) (first)

        let seventh : {{a}, {a, b}} ‚äÜ ùí´ (A ‚à™ B) := fun (x) => fun (s : x ‚àà {{a}, {a, b}}) => Or.elim (Iff.mp (unordered_pair_set_is_unordered_pair {a} {a, b} x) s) (fun (r : x = {a}) =>
          eq_subst (fun (t) => t ‚àà ùí´ (A ‚à™ B)) {a} x (Eq.symm r) fifth

        ) (
          fun (r : x = {a, b}) => eq_subst (fun (t) => t ‚àà ùí´ (A ‚à™ B)) {a, b} x (Eq.symm r) sixth
        )

        Iff.mpr (boolean_set_is_boolean (ùí´ (A ‚à™ B)) (a, b)) seventh
theorem inter_pair_is_singl_fst : ‚àÄ a b, ‚ãÇ (a, b) = {a} :=
  fun (a) => fun (b) =>
    extensionality (‚ãÇ (a, b)) {a}
    (
      fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà ‚ãÇ (a, b)) =>
          And.right (Iff.mp (intersection_set_is_intersection (a, b) x) h) {a} (left_unordered_pair {a} {a, b})

      )
      (
        fun (h : x ‚àà {a}) =>
          let first := in_singl_elem a x h
          let h‚ÇÅ : forall_in_A (fun y => a ‚àà y) (a, b) := (
              fun (m : Set) => fun (r : m ‚àà (a, b)) =>
              let third := Iff.mp (unordered_pair_set_is_unordered_pair {a} {a, b} m) r
              Or.elim third
              (
                fun (t : m = {a}) =>
                  let fourth := left_unordered_pair a a
                  eq_subst (fun (u) => a ‚àà u) {a} m (Eq.symm t) fourth

              )
              (
                fun (t : m = {a, b}) =>
                  let fourth := left_unordered_pair a b
                  eq_subst (fun (u) => a ‚àà u) {a, b} m (Eq.symm t) fourth

              )
          )
          let second := Iff.mpr (intersection_non_empty (a, b) (fun (g : (a, b) = ‚àÖ) => (empty_set_is_empty {a}) (eq_subst (fun (s) => {a} ‚àà s) (a, b) ‚àÖ (g) (left_unordered_pair {a} {a, b}))) a) (h‚ÇÅ)
          eq_subst (fun (u) => u ‚àà ‚ãÇ (a, b)) a x (Eq.symm first) (second)
      )
  )
theorem union_pair_is_all_coords : ‚àÄ a b, ‚ãÉ (a, b) = {a, b} :=
  fun (a) => fun (b) =>
    extensionality (‚ãÉ (a, b)) {a, b}
    (
      fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà ‚ãÉ (a, b)) =>
          let first := Iff.mp (union2_sets_prop {a} {a, b} x) h
          Or.elim first
          (
            fun (t : x ‚àà {a}) =>
              Iff.mpr (unordered_pair_set_is_unordered_pair a b x) ( (Or.inl : x = a ‚Üí x = a ‚à® x = b)  (in_singl_elem a x t))
          )
          (
            fun (t : x ‚àà {a, b}) => t
          )

      )
      (
        fun (h : x ‚àà {a, b}) =>
          let first := Iff.mp (unordered_pair_set_is_unordered_pair a b x) h
          Or.elim first
          (
            fun (g : x = a) =>
              Iff.mpr (union2_sets_prop {a} {a, b} x) ((Or.inl : x ‚àà {a} ‚Üí x ‚àà {a} ‚à® x ‚àà {a, b}) (eq_subst (fun (u) => u ‚àà {a}) a x (Eq.symm g) (elem_in_singl a)))

          )
          (
            fun (g : x = b) =>
              Iff.mpr (union2_sets_prop {a} {a, b} x) ((Or.inr : x ‚àà {a, b} ‚Üí x ‚àà {a} ‚à® x ‚àà {a, b}) (eq_subst (fun (u) => u ‚àà {a, b}) b x (Eq.symm g) (right_unordered_pair a b)))
          )

      )
  )

axiom contraposition (p q : Prop) : (p ‚Üí q) ‚Üî (¬¨q ‚Üí ¬¨p)
open Classical
theorem coordinates_snd_corr_lemma : ‚àÄ a b, {x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)} = {b} :=
  fun (a) => fun (b) =>
    extensionality {x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)} {b}
    (
      fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà {x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)}) =>
          let first := Iff.mp (specification_set_is_specification (fun (p) => ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí p ‚àâ ‚ãÇ (a, b)) (‚ãÉ (a, b)) x) h
          let second := And.left first
          let third := And.right first
          let fourth := eq_subst (fun (u) => x ‚àà u) (‚ãÉ (a, b)) {a, b} (union_pair_is_all_coords a b) (second)
          let fifth := Iff.mp (unordered_pair_set_is_unordered_pair a b x) fourth
          Or.elim fifth
          (
            fun (t : x = a) =>
              Or.elim (em (‚ãÉ (a, b) = ‚ãÇ (a, b)))
              (
                fun (r : ‚ãÉ (a, b) = ‚ãÇ (a, b)) =>
                let fourth := eq_subst (fun (u) => ‚ãÉ (a, b) = u) (‚ãÇ (a, b)) {a} (inter_pair_is_singl_fst a b) (r)
                let fifth := eq_subst (fun (u) => u = {a}) (‚ãÉ (a, b)) {a, b} (union_pair_is_all_coords a b) (fourth)
                let sixth := eq_subst (fun (u) => b ‚àà u) {a, b} {a} fifth (right_unordered_pair a b)
                let seventh := in_singl_elem a b sixth
                let eightht := eq_subst (fun (u) => u = b) a x (Eq.symm t) (Eq.symm seventh)

                eq_subst (fun (u) => u ‚àà {b}) b x (Eq.symm eightht) (elem_in_singl b)

              )
              (
                fun (r : ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b)) =>
                  let fourth := third r
                  let fifth := eq_subst (fun (u) => x ‚àâ u) (‚ãÇ (a, b)) {a} (inter_pair_is_singl_fst a b) (fourth)
                  let sixth := (fun (g : x = a) => fifth (eq_subst (fun (u) => u ‚àà {a}) a x (Eq.symm g) (elem_in_singl a)))
                  let seventh := sixth t
                  (False.elim : False ‚Üí (x ‚àà {b})) (seventh)
              )
          )
          (
            fun (t : x = b) =>
              eq_subst (fun (u) => u ‚àà {b}) b x (Eq.symm t) (elem_in_singl b)
          )
      )
      (
        fun (h : x ‚àà {b}) =>
          let first := in_singl_elem b x h
          let second: b ‚àà ‚ãÉ (a, b) := eq_subst (fun (u) => b ‚àà u) ({a, b}) (‚ãÉ (a, b)) (Eq.symm (union_pair_is_all_coords a b)) (right_unordered_pair a b)
          let third : ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí b ‚àâ ‚ãÇ (a, b) := (Iff.mp (contraposition (b ‚àà ‚ãÇ (a, b)) (‚ãÉ (a, b) = ‚ãÇ (a, b)))) (
            fun (t : b ‚àà ‚ãÇ (a, b)) =>
                let fourth := eq_subst (fun (u) => b ‚àà u) (‚ãÇ (a, b)) {a} (inter_pair_is_singl_fst a b) (t)
                let fifth := in_singl_elem a b fourth
                let _ : ‚ãÉ (a, b) = {a, b} := union_pair_is_all_coords a b
                let seventh : {a, b} = {a} := extensionality {a, b} {a} (
                  fun (s) =>
                  Iff.intro
                  (
                    fun (property : s ‚àà {a, b}) =>
                      let h‚ÇÅ := Iff.mp (unordered_pair_set_is_unordered_pair a b s) property
                      Or.elim (h‚ÇÅ)
                      (
                        fun (h‚ÇÇ : s = a) =>
                          eq_subst (fun (u) => u ‚àà {a}) a s (Eq.symm h‚ÇÇ) (elem_in_singl a)
                      )
                      (
                        fun (h‚ÇÇ : s = b) =>
                          eq_subst (fun (u) => u ‚àà {a}) a s (Eq.trans (Eq.symm fifth) (Eq.symm h‚ÇÇ)) (elem_in_singl a)
                      )
                  )
                  (
                    fun (property : s ‚àà {a}) =>
                      Iff.mpr (unordered_pair_set_is_unordered_pair a b s) ((Or.inl : s = a ‚Üí s = a ‚à® s = b) (in_singl_elem a s (property)))
                  )
                )
                let eighth : ‚ãÉ (a, b) = {a} := eq_subst (fun (u) => ‚ãÉ (a, b) = u) {a, b} {a} (seventh) (union_pair_is_all_coords a b)
                eq_subst (fun (u) => ‚ãÉ (a, b) = u) {a} (‚ãÇ (a, b)) (Eq.symm (inter_pair_is_singl_fst a b)) (eighth)
          )
          let fourth : b ‚àà ‚ãÉ (a, b) ‚àß (‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí b ‚àâ ‚ãÇ (a, b)) := And.intro (second) (third)
          let fifth: x ‚àà ‚ãÉ (a, b) ‚àß (‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)) := eq_subst (fun (u) => u ‚àà ‚ãÉ (a, b) ‚àß (‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí u ‚àâ ‚ãÇ (a, b))) b x (Eq.symm first) (fourth)
          Iff.mpr (specification_set_is_specification (fun (u) => (‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí u ‚àâ ‚ãÇ (a, b))) (‚ãÉ (a, b)) x) (fifth)
      )
    )
noncomputable def fst_coor (A : Set) : Set := ‚ãÉ (‚ãÇ A)
noncomputable def snd_coor (A : Set) : Set := ‚ãÉ ({x ‚àà ‚ãÉ A | ‚ãÉ A ‚â† ‚ãÇ A ‚Üí x ‚àâ ‚ãÇ A})
theorem coordinates_fst_coor : ‚àÄ a b, fst_coor (a, b) = a :=
  fun (a) => fun (b) =>
    let first : ‚ãÉ (‚ãÇ (a, b)) = ‚ãÉ ({a}) := eq_subst (fun (u) => ‚ãÉ (‚ãÇ (a, b)) = ‚ãÉ u) (‚ãÇ (a, b)) {a} (inter_pair_is_singl_fst a b) (Eq.refl (‚ãÉ (‚ãÇ (a, b))))
    eq_subst (fun (u) => ‚ãÉ (‚ãÇ (a, b)) = u) (‚ãÉ ({a})) a (union_sing a) (first)
theorem coordinates_snd_copr : ‚àÄ a b, snd_coor (a, b) = b :=
  fun (a) => fun (b) =>
    let first : ‚ãÉ ({x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)}) = ‚ãÉ ({b})
    := eq_subst (fun (u) => ‚ãÉ ({x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)}) = ‚ãÉ u) ({x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)}) {b} (coordinates_snd_corr_lemma a b) (Eq.refl (‚ãÉ ({x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)})))
    eq_subst (fun (u) => ‚ãÉ ({x ‚àà ‚ãÉ (a, b) | ‚ãÉ (a, b) ‚â† ‚ãÇ (a, b) ‚Üí x ‚àâ ‚ãÇ (a, b)}) = u) (‚ãÉ {b}) (b) (union_sing b) (first)
noncomputable def cartesian_product (A : Set) (B : Set) : Set := {z ‚àà ùí´ (ùí´ (A ‚à™ B)) | ‚àÉ x ‚àà A; ‚àÉ y ‚àà B; z = (x, y)}
infix:60 (priority:=high) " √ó " => cartesian_product
theorem cartesian_product_is_cartesian: ‚àÄ A B pr, pr ‚àà (A √ó B) ‚Üî (‚àÉ x ‚àà A; ‚àÉ y ‚àà B; pr = (x, y)) :=
    fun (A) => fun (B) => fun (pr) =>
      Iff.intro
      (
        fun (h : pr ‚àà A √ó B) =>
          let second := ùí´ (ùí´ (A ‚à™ B))
          And.right (Iff.mp (specification_set_is_specification (fun (pr) => (‚àÉ x ‚àà A; ‚àÉ y ‚àà B; pr = (x, y))) second pr) h)

      )
      (
        fun (h : (‚àÉ x ‚àà A; ‚àÉ y ‚àà B; pr = (x, y))) =>
          Exists.elim h
          (
            fun (w) =>
              fun (hw : w ‚àà A ‚àß ‚àÉ y ‚àà B; pr = (w, y)) =>
                Exists.elim (And.right (hw))
                (
                  fun (u) =>
                    fun (hu : u ‚àà B ‚àß pr = (w, u)) =>
                    let first : (w, u) ‚àà ùí´ (ùí´ (A ‚à™ B)) := ordered_pair_set_belonging A B w (And.left hw) u (And.left hu)
                    let second : pr ‚àà ùí´ (ùí´ (A ‚à™ B)):= eq_subst (fun (st) => st ‚àà ùí´ (ùí´ (A ‚à™ B))) ((w, u)) (pr) (Eq.symm (And.right hu)) (first)
                    let third := And.intro second h
                    Iff.mpr (specification_set_is_specification (fun (pr) => (‚àÉ x ‚àà A; ‚àÉ y ‚àà B; pr = (x, y))) (ùí´ (ùí´ (A ‚à™ B))) pr) third
                )
          )
      )
theorem cartesian_product_pair_prop : ‚àÄ A B a b, (a, b) ‚àà (A √ó B) ‚Üî (a ‚àà A ‚àß b ‚àà B) :=
  fun (A B a b) =>
    Iff.intro
    (
      fun (h : (a, b) ‚àà (A √ó B)) =>
        let first := Iff.mp (cartesian_product_is_cartesian A B (a, b)) h
        Exists.elim first
        (
          fun (w) =>
            fun (hw : w ‚àà A ‚àß ‚àÉ y ‚àà B; (a, b) = (w, y)) =>
              Exists.elim (And.right hw)
              (
                fun (u) =>
                  fun (hu : u ‚àà B ‚àß (a, b) = (w, u)) =>
                    let first := Iff.mp (ordered_pair_set_prop a b w u) (And.right hu)
                    let second := eq_subst (fun (elem1) => elem1 ‚àà A) w a (Eq.symm (And.left first)) (And.left hw)
                    let third := eq_subst (fun (elem1) => elem1 ‚àà B) u b (Eq.symm (And.right first)) (And.left hu)
                    And.intro second third
              )
        )
    )
    (
      fun (h : a ‚àà A ‚àß b ‚àà B) =>
        let first := Iff.mpr (cartesian_product_is_cartesian A B (a, b))
        let second: exists_in_A (fun x => exists_in_A (fun y => (a, b) = (x, y)) B) A := Exists.intro a (And.intro (And.left h) (Exists.intro b (And.intro (And.right h) (Eq.refl (a, b)))))
        first second
    )
theorem cartesian_product_subset : ‚àÄ A B C D, A ‚äÜ C ‚Üí B ‚äÜ D ‚Üí (A √ó B) ‚äÜ C √ó D :=
  fun (A B C D) => fun (h‚ÇÅ : A ‚äÜ C) => fun (h‚ÇÇ : B ‚äÜ D) =>
    fun (x) =>
      fun (t : x ‚àà A √ó B) =>
        let first := Iff.mp (cartesian_product_is_cartesian A B x) t
        Exists.elim first
        (
          fun (w) =>
            fun (hw : w ‚àà A ‚àß ‚àÉ u ‚àà B; x = (w, u)) =>
              Exists.elim (And.right hw)
              (
                fun (u) =>
                  fun (hu : u ‚àà B ‚àß x = (w, u)) =>
                    Iff.mpr ((cartesian_product_is_cartesian C D x)) (
                      Exists.intro w (And.intro (h‚ÇÅ w (And.left hw)) (Exists.intro u (And.intro (h‚ÇÇ u (And.left hu)) (And.right hu))))
                    )

              )
        )
theorem cartesian_product_intersect : ‚àÄ A B C D, (A √ó B) ‚à© (C √ó D) ‚äÜ (A ‚à© C) √ó (B ‚à© D) :=
  fun (A B C D) => fun (x) => fun (t : x ‚àà (A √ó B) ‚à© (C √ó D)) =>
    let h‚ÇÅ := Iff.mp (intersect_2sets_prop (A √ó B) (C √ó D) x) t
    let h‚ÇÇ := And.left h‚ÇÅ
    let h‚ÇÉ := And.right h‚ÇÅ
    let h‚ÇÑ := Iff.mp (cartesian_product_is_cartesian A B x) h‚ÇÇ
    let h‚ÇÖ := Iff.mp (cartesian_product_is_cartesian C D x) h‚ÇÉ
    Exists.elim h‚ÇÑ
    (
      fun (w) =>
        fun (hw : w ‚àà A ‚àß ‚àÉ y ‚àà B; x = (w, y)) =>
          Exists.elim (And.right hw)
          (
            fun (u) =>
              fun (hu : u ‚àà B ‚àß x = (w, u)) =>
                Exists.elim h‚ÇÖ
                (
                  fun (y) =>
                    fun (hy : y ‚àà C ‚àß ‚àÉ r ‚àà D; x = (y, r)) =>
                      Exists.elim (And.right hy)
                      (
                        fun (z) =>
                          fun (hz : z ‚àà D ‚àß x = (y, z)) =>
                            let h‚ÇÜ := Iff.mp (ordered_pair_set_prop w u y z) (Eq.trans (Eq.symm (And.right hu)) (And.right hz))
                            let h‚Çá := Iff.mpr (intersect_2sets_prop A C w) (And.intro (And.left hw) (eq_subst (fun (u) => u ‚àà C) y w (Eq.symm (And.left h‚ÇÜ)) (And.left hy)))
                            let h‚Çà := Iff.mpr (intersect_2sets_prop B D u) (And.intro (And.left hu) (eq_subst (fun (p) => p ‚àà D) z u (Eq.symm (And.right h‚ÇÜ)) (And.left hz)))
                            let h‚Çâ := Iff.mpr (cartesian_product_pair_prop (A ‚à© C) (B ‚à© D) w u) (And.intro (h‚Çá) (h‚Çà))
                            eq_subst (fun (p) => p ‚àà (A ‚à© C) √ó (B ‚à© D)) (w, u) x (Eq.symm (And.right hu)) (h‚Çâ)
                      )
                )
          )
    )


-- tuple syntax
declare_syntax_cat pair_comprehension
syntax  pair_comprehension "; " term : pair_comprehension
syntax term : pair_comprehension
syntax "‚ÅÖ" pair_comprehension "‚ÅÜ" : term
macro_rules
| `(‚ÅÖ $term1:term‚ÅÜ) => `($term1)
| `(‚ÅÖ $term1:term; $term2:term‚ÅÜ) => `(ordered_pair_set $term1 $term2)
| `(‚ÅÖ $rest:pair_comprehension; $elem:term‚ÅÜ) => `(ordered_pair_set ‚ÅÖ$rest:pair_comprehension‚ÅÜ $elem:term)
noncomputable def binary_relation (R : Set) : Prop := ‚àÄ z ‚àà R; ‚àÉ a, ‚àÉ b, z = (a, b)

-- write (x . P . y) istead of (x, y) ‚àà P
macro_rules
| `(($x:term . $P:term . $y:term)) => `(($x, $y) ‚àà $P)
theorem binary_relation_elements_set: ‚àÄ R x y, (x . R . y) ‚Üí (x ‚àà ‚ãÉ (‚ãÉ R) ‚àß y ‚àà ‚ãÉ (‚ãÉ R)) :=
  fun (R : Set) => fun (x : Set) => fun (y : Set) =>
    fun (h : (x . R . y)) =>
      let first: {x, y} ‚àà (x, y) := right_unordered_pair {x} {x, y}
      let second: {x, y} ‚àà ‚ãÉ R := Iff.mpr (union_set_is_union R {x, y}) (Exists.intro (x, y) (And.intro (h) (first)))
      let third := right_unordered_pair x y
      let fourth := left_unordered_pair x y
      let fifth := Iff.mpr (union_set_is_union (‚ãÉ R) x) (Exists.intro {x, y} (And.intro (second) (fourth)))
      let sixth := Iff.mpr (union_set_is_union (‚ãÉ R) y) (Exists.intro {x, y} (And.intro (second) (third)))
      And.intro fifth sixth
noncomputable def dom (R : Set) := {x ‚àà ‚ãÉ (‚ãÉ R) | ‚àÉ y, (x . R . y)}
noncomputable def rng (R : Set) := {y ‚àà ‚ãÉ (‚ãÉ R) | ‚àÉ x, (x . R . y)}
theorem dom_rng_rel_prop: ‚àÄ R, (binary_relation R) ‚Üí (dom R ‚à™ rng R = ‚ãÉ (‚ãÉ R)) :=
    fun (R : Set) =>
      fun (h : (binary_relation R)) =>
        subset_then_equality (dom R ‚à™ rng R) (‚ãÉ (‚ãÉ R)) (
          And.intro
          (
            fun (x) =>
              fun (g : x ‚àà (dom R ‚à™ rng R)) =>
                let first:= Iff.mp (union2_sets_prop (dom R) (rng R) x) g
                Or.elim first
                (
                  fun (f : x ‚àà dom R) =>
                    And.left (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) x) f)
                )
                (
                  fun (f : x ‚àà rng R) =>
                    And.left (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) x) f)
                )

          )
          (
            fun (coor) =>
              fun (g : coor ‚àà ‚ãÉ (‚ãÉ R)) =>
                let first := (Iff.mp (union_set_is_union (‚ãÉ R) coor) g)
                Exists.elim first
                (
                  fun (w) =>
                    fun (hw : w ‚àà ‚ãÉ R ‚àß coor ‚àà w) =>
                      let second := Iff.mp ((union_set_is_union R w)) (And.left hw)
                      Exists.elim second
                      (
                        fun (u) =>
                          fun (hu : u ‚àà R ‚àß w ‚àà u) =>
                            let third := h u (And.left hu)
                            Exists.elim third (
                              fun (a) =>
                                fun (ha : ‚àÉ b, u = (a, b)) =>
                                  Exists.elim ha
                                  (
                                    fun (b) =>
                                      fun (hb : u = (a, b)) =>
                                        let fourth := Iff.mp (unordered_pair_set_is_unordered_pair {a} {a, b} w) (
                                          eq_subst (fun (t) => w ‚àà t) u (a, b) (hb) (And.right hu)
                                          )
                                        Or.elim (fourth)
                                        (
                                          fun (s : w = {a}) =>
                                            let fifth := eq_subst (fun (t) => coor ‚àà t) w {a} s (And.right hw)
                                            let sixth := in_singl_elem a coor fifth
                                            let seventh := eq_subst (fun (t) => t ‚àà R) u (a, b) hb (And.left hu)
                                            let eight := eq_subst (fun (t) => (t . R . b)) a coor (Eq.symm sixth) (seventh)
                                            let nineth: ‚àÉ y, (coor . R . y) := Exists.intro b eight
                                            let tenth: coor ‚àà dom R
                                            := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) coor) (And.intro (g) (nineth))
                                            let eleventh := (Or.inl : coor ‚àà dom R ‚Üí coor ‚àà dom R ‚à® coor ‚àà rng R) tenth
                                            Iff.mpr (union2_sets_prop (dom R) (rng R) coor) eleventh


                                        )
                                        (
                                          fun (s : w = {a, b}) =>
                                            let fifth := eq_subst (fun (t) => coor ‚àà t) w {a, b} s (And.right hw)
                                            let h‚ÇÅ := Iff.mp (unordered_pair_set_is_unordered_pair a b coor) fifth
                                            Or.elim (h‚ÇÅ)
                                            (
                                              fun (sixth : coor = a) =>
                                                let seventh := eq_subst (fun (t) => t ‚àà R) u (a, b) hb (And.left hu)
                                                let eight := eq_subst (fun (t) => (t . R . b)) a coor (Eq.symm sixth) (seventh)
                                                let nineth: ‚àÉ y, (coor . R . y) := Exists.intro b eight
                                                let tenth: coor ‚àà dom R
                                                := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) coor) (And.intro (g) (nineth))
                                                let eleventh := (Or.inl : coor ‚àà dom R ‚Üí coor ‚àà dom R ‚à® coor ‚àà rng R) tenth
                                                Iff.mpr (union2_sets_prop (dom R) (rng R) coor) eleventh
                                            )
                                            (
                                              fun (sixth : coor = b) =>
                                                let seventh := eq_subst (fun (t) => t ‚àà R) u (a, b) hb (And.left hu)
                                                let eight := eq_subst (fun (t) => (a . R . t)) b coor (Eq.symm sixth) (seventh)
                                                let nineth: ‚àÉ x, (x . R . coor) := Exists.intro a eight
                                                let tenth: coor ‚àà rng R
                                                := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) coor) (And.intro (g) (nineth))
                                                let eleventh := (Or.inr : coor ‚àà rng R ‚Üí coor ‚àà dom R ‚à® coor ‚àà rng R) tenth
                                                Iff.mpr (union2_sets_prop (dom R) (rng R) coor) eleventh

                                            )
                                        )
                                  )
                            )
                      )
                )
         )
        )
theorem dom_prop : ‚àÄ R x, x ‚àà dom R ‚Üî ‚àÉ y, (x . R . y) :=
  fun (R) =>
    fun (x) =>
      Iff.intro
      (
        fun (s : x ‚àà dom R) =>
          And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) x) s)

      )
      (
        fun (s : ‚àÉ y, (x . R . y)) =>
          Exists.elim (s)
          (
            fun (w) =>
              fun (hw : (x . R . w)) =>
              let first := And.left (binary_relation_elements_set R x w hw)
              Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) x) (And.intro (first) (s))

          )
      )
theorem rng_prop : ‚àÄ R y, y ‚àà rng R ‚Üî ‚àÉ x, (x . R . y) :=
  fun (R) =>
    fun (y) =>
      Iff.intro
      (
        fun (s : y ‚àà rng R) =>
          And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) y) s)

      )
      (
        fun (s : ‚àÉ x, (x . R . y)) =>
          Exists.elim (s)
          (
            fun (w) =>
              fun (hw : (w . R . y)) =>
              let first := And.right (binary_relation_elements_set R w y hw)
              Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) y) (And.intro (first) (s))
          )
      )
theorem binary_relation_prop : ‚àÄ R, binary_relation R ‚Üí R ‚äÜ dom R √ó rng R :=
  fun (R) => fun (h : binary_relation R) =>
    fun (pr) =>
      fun (g : pr ‚àà R) =>
        Exists.elim  (h pr g)
        (
          fun (a) =>
            fun (ha : ‚àÉ b, pr = (a, b)) =>
              Exists.elim (ha)
              (
                fun (b) =>
                  fun (hb : pr = (a, b)) =>
                    let first := eq_subst (fun(t) => t ‚àà R) pr (a, b) (hb) g
                    let second := And.left (binary_relation_elements_set R a b first)
                    let third := And.right (binary_relation_elements_set R a b first)
                    let h‚ÇÅ : ‚àÉ b, (a . R . b) := Exists.intro b (eq_subst (fun (t) => t ‚àà R) pr (a, b) (hb) (g))
                    let fourth: a ‚àà dom R := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) a) (And.intro second h‚ÇÅ)
                    let h‚ÇÇ : ‚àÉ a, (a . R . b) := Exists.intro a (eq_subst (fun (t) => t ‚àà R) pr (a, b) (hb) (g))
                    let fifth: b ‚àà rng R := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) b) (And.intro third h‚ÇÇ)
                    let sixth := Iff.mpr (cartesian_product_pair_prop (dom R) (rng R) a b)
                    let seventh := And.intro fourth fifth
                    let eighth := sixth seventh
                    eq_subst (fun (t) => t ‚àà dom R √ó rng R) (a, b) pr (Eq.symm hb) (eighth)
              )
        )
theorem prop_then_binary_relation : ‚àÄ A B R, R ‚äÜ A √ó B ‚Üí binary_relation R ‚àß dom R ‚äÜ A ‚àß rng R ‚äÜ B :=
  fun (A B R) => fun (h : R ‚äÜ A √ó B) =>
    let first : binary_relation R := fun (z) => fun (g : z ‚àà R) =>
      Exists.elim (Iff.mp (cartesian_product_is_cartesian A B z) (h z g))
      (
        fun (a) =>
          fun (ha : a ‚àà A ‚àß ‚àÉ b ‚àà B; z = (a, b)) =>
            Exists.elim (And.right ha)
            (
              fun (b) =>
                fun (hb : b ‚àà B ‚àß z = (a, b)) =>
                  Exists.intro a (Exists.intro b (And.right hb))
            )
      )

    And.intro (
      first
    ) (
      And.intro
      (
        fun (a) => fun (g : a ‚àà dom R) =>

        let second := And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ y, (t . R . y)) (‚ãÉ (‚ãÉ R)) a) g)
        Exists.elim second
        (
          fun (b) =>
            fun (hb : (a . R . b)) =>
              And.left (Iff.mp (cartesian_product_pair_prop A B a b) (h (a, b) hb))
        )
      )
      (
        fun (b) => fun (g : b ‚àà rng R) =>

        let second := And.right (Iff.mp ((specification_set_is_specification (fun (t) => ‚àÉ x, (x . R . t)) (‚ãÉ (‚ãÉ R)) b)) g)
        Exists.elim second
        (
          fun (a) =>
            fun (ha : (a . R . b)) =>
              And.right (Iff.mp (cartesian_product_pair_prop A B a b) (h (a, b) ha))
        )
      )
    )
theorem rel_dom_rng_elem : ‚àÄ R, binary_relation R ‚Üí ‚àÄ x y, (x . R . y) ‚Üí x ‚àà dom R ‚àß y ‚àà rng R :=
  fun (R) => fun (h : binary_relation R) =>
    fun (x) => fun (y) => fun (g : (x . R . y)) =>
    let first := binary_relation_prop R h (x, y) g
    Iff.mp (cartesian_product_pair_prop (dom R) (rng R) x y) first
theorem union2_rel_is_rel : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí binary_relation (P ‚à™ Q) :=
  fun (P) => fun (Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
    fun (z) => fun (h‚ÇÅ : z ‚àà (P ‚à™ Q)) =>
      let first := Iff.mp (union2_sets_prop P Q z) h‚ÇÅ
      Or.elim first
      (
        fun (s : z ‚àà P) =>
          h z s
      )
      (
        fun (s : z ‚àà Q) =>
          g z s
      )
theorem intersect2_rel_is_rel : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí binary_relation (P ‚à© Q) :=
  fun (P) => fun (Q) => fun (h : binary_relation P) => fun (_ : binary_relation Q) =>
    fun (z) => fun (h‚ÇÅ : z ‚àà (P ‚à© Q)) =>
      h z ((And.left (intersect_2sets_subset_prop P Q)) z h‚ÇÅ)
noncomputable def binary_relation_between (A B R : Set) : Prop := R ‚äÜ A √ó B
noncomputable def binary_relation_on (A R : Set) : Prop := R ‚äÜ A √ó A
noncomputable def comp (A B R : Set) : Set := (A √ó B) \ R
theorem comp_is_rel : ‚àÄ A B R, binary_relation (comp A B R) :=
  fun (A B R) => fun (z) => fun (h : z ‚àà (comp A B R)) =>
    let first := comp_2sets_subset_prop (A √ó B) R z h
    let second := (Iff.mp (cartesian_product_is_cartesian A B z) first)
    Exists.elim (second)
    (
      fun (w) =>
        fun (hw : w ‚àà A ‚àß ‚àÉ u ‚àà B; z = (w, u)) =>
          Exists.elim (And.right hw)
          (
            fun (u) =>
              fun (hu : u ‚àà B ‚àß z = (w, u)) =>
              Exists.intro w (Exists.intro u (And.right hu))
          )
    )
noncomputable def inv (R : Set) : Set := {z ‚àà rng R √ó dom R | ‚àÉ x, ‚àÉ y, (z = (y, x) ‚àß (x . R . y))}
syntax term"‚Åª¬π" : term
macro_rules
| `($term1:term‚Åª¬π) => `(inv $term1)
theorem inv_is_rel : ‚àÄ R, binary_relation R ‚Üí (binary_relation (R‚Åª¬π)) :=
  fun (R) => fun (_ : binary_relation R) =>
    fun (z) => fun (h : z ‚àà R‚Åª¬π) =>
      let first := And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ x, ‚àÉ y, (t = (y, x) ‚àß (x . R . y))) (rng R √ó dom R) z) h)
      Exists.elim first (
        fun (a) =>
          fun (ha : ‚àÉ b, z = (b, a) ‚àß (a . R . b)) =>
            Exists.elim ha
            (
              fun (b) =>
                fun (hb : z = (b, a) ‚àß (a . R . b)) =>
                  Exists.intro b (Exists.intro a (And.left hb))
            )
      )
theorem inv_pair_prop_mp : ‚àÄ R, ‚àÄ x y, (x . R . y) ‚Üí (y . (R‚Åª¬π) . x) :=
  fun (R) => fun (x y) => fun (h‚ÇÅ : (x . R . y)) =>
    let first: ((y . (rng R √ó dom R) . x) ‚àß ‚àÉ x_1 y_1, (y, x) = (y_1, x_1) ‚àß (x_1 . R . y_1)) ‚Üí (y . (R‚Åª¬π) . x)
          := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ x, ‚àÉ y, (t = (y, x) ‚àß (x . R . y))) (rng R √ó dom R) (y, x))
    let second := Iff.mpr (rng_prop R y) (Exists.intro x (h‚ÇÅ))
    let third := Iff.mpr (dom_prop R x) (Exists.intro y (h‚ÇÅ))
    let fourth := Iff.mpr (cartesian_product_pair_prop (rng R) (dom R) y x) (And.intro second third)
    let fifth : ‚àÉ x_1 y_1, (y, x) = (y_1, x_1) ‚àß (x_1 . R . y_1) := Exists.intro x (Exists.intro y (And.intro (Eq.refl (y, x)) (h‚ÇÅ)))
    first (And.intro (fourth) (fifth))
theorem inv_pair_prop: ‚àÄ R, binary_relation R ‚Üí ‚àÄ x y, (x . R . y) ‚Üî (y . (R‚Åª¬π) . x):=
  fun (R) => fun (_ : binary_relation R) =>
    fun (x) => fun (y) =>
      Iff.intro
      (
       inv_pair_prop_mp R x y
      )
      (
        fun (h‚ÇÇ : (y . (R‚Åª¬π) . x)) =>
          Exists.elim (And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ x, ‚àÉ y, (t = (y, x) ‚àß (x . R . y))) (rng R √ó dom R) (y, x)) h‚ÇÇ))
          (
            fun (x_1) =>
              fun (hx_1 : ‚àÉ y_1, (y, x) = (y_1, x_1) ‚àß (x_1 . R . y_1)) =>
                Exists.elim (hx_1)
                (
                  fun (y_1) =>
                    fun (hy_1 : (y, x) = (y_1, x_1) ‚àß (x_1 . R . y_1)) =>
                      let first := Iff.mp (ordered_pair_set_prop y_1 x_1 y x) (Eq.symm (And.left hy_1))
                      let second := Iff.mpr (ordered_pair_set_prop x y x_1 y_1) (And.intro (Eq.symm (And.right first)) (Eq.symm (And.left first)))
                      let third := eq_subst (fun (t) => t ‚àà R) (x_1, y_1) (x, y) (Eq.symm second) (And.right hy_1)
                      third
                )
          )
      )
theorem inv_prop : ‚àÄ R, binary_relation R ‚Üí (R‚Åª¬π)‚Åª¬π = R :=
  fun (R) => fun (h : binary_relation R) =>
    extensionality ((R‚Åª¬π)‚Åª¬π) R
    (
      fun (x) =>
      Iff.intro
      (
        fun (s : x ‚àà ((R‚Åª¬π)‚Åª¬π)) =>
          let first := inv_is_rel R h
          Exists.elim (inv_is_rel (R‚Åª¬π) first x s)
          (
            fun (a) =>
              fun (ha : ‚àÉ b, x = (a, b) ) =>
              Exists.elim ha
              (
                fun (b) =>
                  fun (hb : x = (a, b)) =>
                    let second := eq_subst (fun (t) => t ‚àà ((R‚Åª¬π)‚Åª¬π)) x (a, b) hb s
                    let third := Iff.mpr (inv_pair_prop (R‚Åª¬π) first b a) second
                    let fourth := Iff.mpr (inv_pair_prop R h a b) third
                    eq_subst (fun (t) => t ‚àà R) (a, b) x (Eq.symm hb) (fourth)
              )
          )
      )
      (
        fun (s : x ‚àà R) =>
          let h‚ÇÅ := inv_is_rel R h
          Exists.elim (h x s)
          (
            fun (a) =>
              fun (ha : ‚àÉ b, x = (a, b)) =>
                Exists.elim ha
                (
                  fun (b) =>
                    fun (hb : x = (a, b)) =>
                      let first := eq_subst (fun (t) => t ‚àà R) x (a, b) hb s
                      let second:= Iff.mp (inv_pair_prop R (h) a b) first
                      let third:= Iff.mp (inv_pair_prop (R‚Åª¬π) (h‚ÇÅ) b a) second
                      eq_subst (fun (t) => t ‚àà (R‚Åª¬π)‚Åª¬π) (a, b) x (Eq.symm hb) (third)
                )
          )
      )
    )
theorem inv_between_mp : ‚àÄ A B R, binary_relation_between A B R ‚Üí binary_relation_between B A (R‚Åª¬π) :=
  fun (A B R) =>
      (
        fun (h : binary_relation_between A B R) =>
          fun (s) => fun (h‚ÇÅ : s ‚àà (R‚Åª¬π)) =>
            let h‚ÇÇ := And.right (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ x, ‚àÉ y, (u = (y, x) ‚àß (x . R . y))) (rng R √ó dom R) s) (h‚ÇÅ))
            Exists.elim h‚ÇÇ
            (
              fun (w) =>
                fun (hw : ‚àÉ u, s = (u, w) ‚àß (w . R . u)) =>
                  Exists.elim (hw)
                  (
                    fun (u) =>
                      fun (hu : s = (u, w) ‚àß (w . R . u)) =>
                        let h‚ÇÉ := h (w, u) (And.right hu)
                        let h‚ÇÑ := Iff.mp (cartesian_product_pair_prop A B w u) h‚ÇÉ
                        let h‚ÇÖ := Iff.mpr (cartesian_product_pair_prop B A u w) (And.intro (And.right h‚ÇÑ) (And.left h‚ÇÑ))
                        eq_subst (fun (p) => p ‚àà B √ó A) (u, w) s (Eq.symm (And.left hu)) (h‚ÇÖ)
                  )
            )

      )
theorem inv_dom: ‚àÄ R, binary_relation R ‚Üí dom (R‚Åª¬π) = rng R :=
  fun (R) => fun (h : binary_relation R) =>
    (
      extensionality (dom (R‚Åª¬π)) (rng R) (
        fun (x) =>
        Iff.intro
        (
          fun (g : x ‚àà dom (R‚Åª¬π)) =>
            Exists.elim (Iff.mp (dom_prop (R‚Åª¬π) x) g)
            (
              fun (y) =>
                fun (hy: (x . (R‚Åª¬π) . y)) =>
                  let second:= Iff.mpr (inv_pair_prop R h y x) hy
                  let third: ‚àÉ a, (a . R . x) := Exists.intro y second
                  Iff.mpr (rng_prop R x) third
            )
        )
        (
          fun (g : x ‚àà rng R) =>
            Exists.elim (Iff.mp (rng_prop R x) g)
            (
              fun (y) =>
                fun (hy : (y . R . x)) =>
                  let second := Iff.mp (inv_pair_prop R h y x) hy
                  let third: ‚àÉ a, (x . (R‚Åª¬π) . a)  := Exists.intro y second
                  Iff.mpr (dom_prop (R‚Åª¬π) x) third
            )
        )
      )
    )
theorem inv_rng: ‚àÄ R, binary_relation R ‚Üí rng (R‚Åª¬π) = dom R :=
  fun (R) => fun (h : binary_relation R) =>
    let first := inv_is_rel R h
    let second := Eq.symm (inv_dom (R‚Åª¬π) first)
    eq_subst (fun (t) => rng (R‚Åª¬π) = dom t) ((R‚Åª¬π)‚Åª¬π) R (inv_prop R h) second
noncomputable def composition (P Q : Set) : Set := {pr ‚àà dom Q √ó rng P | ‚àÉ x y, (pr = (x, y)) ‚àß ‚àÉ z, (x . Q . z) ‚àß (z . P . y)}
infix:60 (priority:=high) " ‚àò " => composition
theorem composition_is_rel : ‚àÄ P Q, binary_relation (P ‚àò Q) :=
  fun (P) => fun (Q) =>
        fun (z) => fun (r : z ‚àà (P ‚àò Q)) =>
          let first := specification_set_subset (fun (t) => ‚àÉ x y, (t = (x, y) ‚àß ‚àÉ z, (x . Q . z) ‚àß (z . P . y) )) (dom Q √ó rng P) z r
          let second := Iff.mp (cartesian_product_is_cartesian (dom Q) (rng P) z) first
          Exists.elim second
          (
            fun (w) =>
              fun (hw : (w ‚àà dom Q ‚àß ‚àÉ y ‚àà (rng P); z = (w, y))) =>
                Exists.elim (And.right hw)
                (
                  fun (u) =>
                    fun (hu : (u ‚àà rng P ‚àß z = (w, u))) =>
                      Exists.intro w (Exists.intro u (And.right hu))
                )
          )
theorem composition_pair_prop : ‚àÄ P Q, ‚àÄ x y, (x . (P ‚àò Q) . y) ‚Üî ‚àÉ z, (x . Q . z) ‚àß (z . P . y) :=
  fun (P Q x y) =>
    Iff.intro
    (
      fun (h : (x . (P ‚àò Q) . y)) =>
        let first := And.right (Iff.mp (specification_set_is_specification (fun (t) => ‚àÉ x y, (t = (x, y) ‚àß ‚àÉ z, (x . Q . z) ‚àß (z . P . y) )) (dom Q √ó rng P) (x, y)) h)
        Exists.elim first
        (
          fun (w) =>
            fun (hw : ‚àÉ y_1, (x, y) = (w, y_1) ‚àß ‚àÉ z, (w . Q . z) ‚àß (z . P . y_1)) =>
              Exists.elim hw
              (
                fun (u) =>
                  fun (hu : ((x, y) = (w, u)) ‚àß ‚àÉ z, (w . Q . z) ‚àß (z . P . u)) =>
                    let h‚ÇÅ := Iff.mp (ordered_pair_set_prop x y w u) (And.left hu)
                    let _ := And.right hu
                    let third := eq_subst (fun (t) => ‚àÉ z, (t . Q . z) ‚àß (z . P . u)) (w) (x) (Eq.symm (And.left h‚ÇÅ)) (And.right hu)
                    eq_subst (fun (t) => ‚àÉ z, (x . Q . z) ‚àß (z . P . t)) (u) (y) (Eq.symm (And.right h‚ÇÅ)) (third)

              )

        )


    )
    (
      fun (h : ‚àÉ z, (x . Q . z) ‚àß (z . P . y) ) =>
        Exists.elim h
        (
          fun (w) =>
            fun (hw : (x . Q . w) ‚àß (w . P . y)) =>
              let first := Iff.mpr (specification_set_is_specification (fun (t) => ‚àÉ x y, (t = (x, y) ‚àß ‚àÉ z, (x . Q . z) ‚àß (z . P . y) )) (dom Q √ó rng P) (x, y))

              let second := Iff.mpr (dom_prop Q x) (Exists.intro w (And.left hw))
              let third := Iff.mpr (rng_prop P y) (Exists.intro w (And.right hw))
              let fourth := Iff.mpr (cartesian_product_pair_prop (dom Q) (rng P) x y) (And.intro second third)
              let fifth: ‚àÉ x_1 y_1, (x, y) = (x_1, y_1) ‚àß ‚àÉ z, (x_1, z) ‚àà Q ‚àß (z, y_1) ‚àà P := Exists.intro x (Exists.intro y (And.intro (Eq.refl (x, y)) (h)))
              first (And.intro (fourth) (fifth))
        )
    )
theorem rel_subset : (‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí (‚àÄ x y, (x . P . y) ‚Üí (x . Q . y)) ‚Üí P ‚äÜ Q) :=
  fun (P Q) => fun (h : binary_relation P) => fun (_ : binary_relation Q) =>
    fun (s : ‚àÄ x y, (x . P . y) ‚Üí (x . Q . y)) =>
      fun (x) =>
        fun (h‚ÇÅ : x ‚àà P) =>
              let first := h x h‚ÇÅ
              Exists.elim first
              (
                fun (w) =>
                  fun (hw : ‚àÉ u, x = (w, u)) =>
                    Exists.elim hw
                    (
                      fun (u) =>
                        fun (hu: x = (w, u)) =>
                          let second := eq_subst (fun (t) => t ‚àà P) x (w, u) (hu) (h‚ÇÅ)
                          let third := s w u second
                          eq_subst (fun (t) => t ‚àà Q) (w, u) x (Eq.symm hu) (third)
                    )
              )
theorem relation_equality : (‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí ((‚àÄ x y, (x . P . y) ‚Üî (x . Q . y)) ‚Üí P = Q)) :=
    fun (P Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
      fun (s : ‚àÄ x y, (x . P . y) ‚Üî (x . Q . y)) =>
        subset_then_equality P Q (And.intro (rel_subset P Q h g (fun (x) => fun (y) => Iff.mp (s x y))) (rel_subset Q P g h (fun (x) => fun (y) => Iff.mp (iff_comm.mp (s x y)))))
theorem composition_pair_assoc: ‚àÄ P Q R x y, (x . ((P ‚àò Q) ‚àò R) . y) ‚Üî (x . (P ‚àò (Q ‚àò R)) . y) :=
  fun (P) => fun (Q) => fun (R) => fun (x) => fun (y) =>
    Iff.intro
    (
      fun (h : (x . ((P ‚àò Q) ‚àò R) . y)) =>
        let first := Iff.mp (composition_pair_prop (P ‚àò Q) R x y) h
        Exists.elim first
        (
          fun (w) =>
            fun (hw : (x . R . w) ‚àß (w . (P ‚àò Q) . y)) =>
              let second := Iff.mp (composition_pair_prop P Q w y) (And.right hw)
              Exists.elim second
              (
                fun (u) =>
                  fun (hu : (w . Q . u) ‚àß (u . P . y)) =>
                    Iff.mpr (composition_pair_prop P (Q ‚àò R) x y)
                     (Exists.intro u (And.intro (Iff.mpr (composition_pair_prop Q R x u)
                      (Exists.intro w (And.intro (And.left hw) (And.left hu)))) (And.right hu))
                     )

              )
        )

    )
    (
      fun (h : (x . (P ‚àò (Q ‚àò R)) . y)) =>
        let first := Iff.mp (composition_pair_prop (P) (Q ‚àò R) x y) h
        Exists.elim first
        (
          fun (w) =>
            fun (hw : (x . (Q ‚àò R) . w) ‚àß (w . P . y)) =>
              let second := Iff.mp (composition_pair_prop Q R x w) (And.left hw)
              Exists.elim second
              (
                fun (u) =>
                  fun (hu : (x . R . u) ‚àß (u . Q . w)) =>
                    Iff.mpr (composition_pair_prop (P ‚àò Q) R x y)
                    (Exists.intro u (And.intro (And.left hu) (Iff.mpr (composition_pair_prop P Q u y)
                    (Exists.intro w (And.intro (And.right hu) (And.right hw)))))
                    )
              )

        )
    )
theorem composition_assoc : ‚àÄ P Q R, ((P ‚àò Q) ‚àò R) = (P ‚àò (Q ‚àò R)) :=
  fun (P) => fun (Q) => fun (R) =>
    relation_equality ((P ‚àò Q) ‚àò R) (P ‚àò (Q ‚àò R)) (composition_is_rel (P ‚àò Q) (R)) (composition_is_rel (P) (Q ‚àò R)) (composition_pair_assoc P Q R)
theorem inv_composition_pair_prop : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí (‚àÄ x y, (x . ((P ‚àò Q)‚Åª¬π) . y) ‚Üî (x . ((Q‚Åª¬π) ‚àò P‚Åª¬π) . y)) :=
  fun (P) => fun (Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
    fun (x) => fun (y) =>
      Iff.intro
      (
        fun (h‚ÇÅ : (x . ((P ‚àò Q)‚Åª¬π) . y)) =>
          let first := Iff.mpr (inv_pair_prop (P ‚àò Q) (composition_is_rel P Q) y x) h‚ÇÅ
          Exists.elim (Iff.mp (composition_pair_prop P Q y x) first)
          (
            fun (w) =>
              fun (hw : (y . Q . w) ‚àß (w . P . x)) =>
                Iff.mpr (composition_pair_prop (Q‚Åª¬π) (P‚Åª¬π) x y) (Exists.intro w (And.intro (Iff.mp (inv_pair_prop P h w x) (And.right hw)) (Iff.mp (inv_pair_prop Q g y w) (And.left hw))))
          )
      )
      (
        fun (h‚ÇÅ : (x . ((Q‚Åª¬π) ‚àò P‚Åª¬π) . y)) =>
          let first := Iff.mp (composition_pair_prop (Q‚Åª¬π) (P‚Åª¬π) x y) h‚ÇÅ
          Exists.elim first
          (
            fun (w) =>
              fun (hw: (x . (P‚Åª¬π) . w) ‚àß (w . (Q‚Åª¬π) . y)) =>
                Iff.mp (inv_pair_prop (P ‚àò Q) (composition_is_rel P Q) y x)
                 (Iff.mpr (composition_pair_prop P Q y x) (Exists.intro w (And.intro (Iff.mpr (inv_pair_prop Q g y w) (And.right hw)) (Iff.mpr (inv_pair_prop P h w x) (And.left hw)))))
          )
      )
theorem inv_composition_prop : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí (P ‚àò Q)‚Åª¬π = ((Q‚Åª¬π) ‚àò (P‚Åª¬π)) :=
  fun (P) => fun (Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
    relation_equality ((P ‚àò Q)‚Åª¬π) ((Q‚Åª¬π) ‚àò P‚Åª¬π) (inv_is_rel (P ‚àò Q) (composition_is_rel P Q)) (composition_is_rel (Q‚Åª¬π) (P‚Åª¬π)) (inv_composition_pair_prop P Q h g)
theorem inv_union_pair_prop : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí ‚àÄ x y, (x . ((P ‚à™ Q)‚Åª¬π) . y) ‚Üî (x . (P‚Åª¬π ‚à™ Q‚Åª¬π) . y) :=
    fun (P) => fun (Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) => fun (x) => fun (y) =>
      Iff.intro
      (
        fun (h‚ÇÅ : (x . ((P ‚à™ Q)‚Åª¬π) . y)) =>
          let first := Iff.mpr (inv_pair_prop (P ‚à™ Q) (union2_rel_is_rel P Q h g) y x) h‚ÇÅ
          let second := Iff.mp (union2_sets_prop P Q (y, x)) first
          Or.elim second
          (
            fun (h‚ÇÇ : (y . P . x)) =>
              let third := Iff.mp (inv_pair_prop P h y x) h‚ÇÇ
              And.left (union2_sets_subset_prop (P‚Åª¬π) (Q‚Åª¬π)) (x, y) third
          )
          (
            fun (h‚ÇÇ : (y . Q . x)) =>
              let third := Iff.mp (inv_pair_prop Q g y x) h‚ÇÇ
              And.right (union2_sets_subset_prop (P‚Åª¬π) (Q‚Åª¬π)) (x, y) third
          )
      )
      (
        fun (h‚ÇÇ : (x . (P‚Åª¬π ‚à™ Q‚Åª¬π) . y)) =>
          let first := Iff.mp (union2_sets_prop (P‚Åª¬π) (Q‚Åª¬π) (x, y)) h‚ÇÇ
          Or.elim first
          (
            fun (h‚ÇÉ : (x . (P‚Åª¬π) . y)) =>
              let second := Iff.mpr (inv_pair_prop P h y x) h‚ÇÉ
              let third := And.left (union2_sets_subset_prop P Q) (y, x) second
              Iff.mp (inv_pair_prop (P ‚à™ Q) (union2_rel_is_rel P Q h g) y x) (third)
          )
          (
            fun (h‚ÇÉ : (x . (Q‚Åª¬π) . y)) =>
              let second := Iff.mpr (inv_pair_prop Q g y x) h‚ÇÉ
              let third := And.right (union2_sets_subset_prop P Q) (y, x) second
              Iff.mp (inv_pair_prop (P ‚à™ Q) (union2_rel_is_rel P Q h g) y x) (third)
          )
      )
theorem inv_union_prop : ‚àÄ P Q, binary_relation P ‚Üí binary_relation Q ‚Üí (P ‚à™ Q)‚Åª¬π = ((P‚Åª¬π) ‚à™ Q‚Åª¬π) :=
  fun (P) => fun (Q) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
    relation_equality ((P ‚à™ Q)‚Åª¬π) ((P‚Åª¬π) ‚à™ Q‚Åª¬π) (inv_is_rel (P ‚à™ Q) (union2_rel_is_rel P Q h g)) (union2_rel_is_rel (P‚Åª¬π) (Q‚Åª¬π) (inv_is_rel P h) (inv_is_rel Q g)) (inv_union_pair_prop P Q h g)
axiom conj_comm (p q : Prop) : (p ‚àß q ‚Üî q ‚àß p)
axiom neg_conj (p q : Prop) : ((p ‚Üî q) ‚Üí (¬¨p ‚Üî ¬¨q))
theorem comp_inv_prop_pair : ‚àÄ P A B, binary_relation_between A B P ‚Üí ‚àÄ x y, (x . (comp A B (P‚Åª¬π)) . y) ‚Üî (x . ((comp B A P)‚Åª¬π) . y) :=
  fun (P) => fun (A) => fun (B) => fun (h : binary_relation_between A B P) => fun (x) => fun (y) =>
    Iff.intro
    (
      fun (h‚ÇÅ : (x . (comp A B (P‚Åª¬π)) . y)) =>
        let first := Iff.mp (difference_prop (A √ó B) (P‚Åª¬π) (x, y)) h‚ÇÅ
        let second := Iff.mpr (cartesian_product_pair_prop B A y x) (Iff.mp (conj_comm (x ‚àà A) (y ‚àà B)) (Iff.mp (cartesian_product_pair_prop A B x y) (And.left first)))
        let third := Iff.mpr (neg_conj ((y, x) ‚àà P) ((x, y) ‚àà (P‚Åª¬π)) (inv_pair_prop P (And.left (prop_then_binary_relation A B P h)) y x)) (And.right first)
        let fourth := Iff.mpr (difference_prop (B √ó A) (P) (y, x)) (And.intro (second) (third))
        Iff.mp (inv_pair_prop (comp B A P) (comp_is_rel B A P) y x) fourth
    )
    (
      fun (h‚ÇÇ : (x . ((comp B A P)‚Åª¬π) . y)) =>
        let first := Iff.mpr (inv_pair_prop (comp B A P) (comp_is_rel B A P) y x) h‚ÇÇ
        let second := Iff.mp (difference_prop (B √ó A) (P) (y, x)) first
        let third := Iff.mpr ((cartesian_product_pair_prop A B x y)) ((Iff.mp (conj_comm (y ‚àà B) (x ‚àà A))) (Iff.mp (cartesian_product_pair_prop B A y x) (And.left second)))
        let fourth := Iff.mp (((neg_conj ((y, x) ‚àà P) ((x, y) ‚àà (P‚Åª¬π)))) (inv_pair_prop P (And.left ((prop_then_binary_relation A B P h))) y x)) (And.right (second))
        Iff.mpr (difference_prop (A √ó B) (P‚Åª¬π) (x, y)) (And.intro (third) (fourth))



    )
axiom iff_transitivity (p q r : Prop) : (p ‚Üî q) ‚Üí (q ‚Üî r) ‚Üí (p ‚Üî r)
axiom conj_disj_distr_left (p q r : Prop) : (p ‚àß (q ‚à® r)) ‚Üî ((p ‚àß q) ‚à® (p ‚àß r))
axiom conj_disj_distr_right (p q r : Prop) : ((q ‚à® r) ‚àß p) ‚Üî ((q ‚àß p) ‚à® (r ‚àß p))
axiom exits_or_prop (P Q : Set ‚Üí Prop) : (‚àÉ x, (P x ‚à® Q x)) ‚Üî ((‚àÉ x, P x) ‚à® (‚àÉ x, Q x))
axiom disj_congr (p q r s : Prop) : (p ‚Üî q) ‚Üí  (r ‚Üî s) ‚Üí (p ‚à® r ‚Üî q ‚à® s)
theorem comp_inv_prop : ‚àÄ P A B, binary_relation_between A B P ‚Üí comp A B (P‚Åª¬π) = (comp B A P)‚Åª¬π :=
  fun (P) => fun (A) => fun (B) => fun (h : binary_relation_between A B P) =>
    relation_equality (comp A B (P‚Åª¬π)) ((comp B A P)‚Åª¬π) (comp_is_rel A B (P‚Åª¬π)) (inv_is_rel (comp B A P) (comp_is_rel B A P)) (comp_inv_prop_pair P A B h)
theorem union_composition_pair_prop_right : ‚àÄ P Q R, ‚àÄ x y, (x . ((P ‚à™ Q) ‚àò R) . y) ‚Üî (x . ((P ‚àò R) ‚à™ (Q ‚àò R)) . y) :=
  fun (P Q R x y) =>
    let first: (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî ‚àÉ z, (x, z) ‚àà R ‚àß (z, y) ‚àà P ‚à™ Q  := composition_pair_prop (P ‚à™ Q) R x y
    let second : (‚àÉ z, (x, z) ‚àà R ‚àß (z, y) ‚àà P ‚à™ Q) ‚Üî (‚àÉ z, (x, z) ‚àà R ‚àß (((z, y) ‚àà P) ‚à® (z, y) ‚àà Q) ) := exists_congr (fun (z) => and_congr_right' (union2_sets_prop P Q (z, y)))
    let third : (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî ‚àÉ z, (x, z) ‚àà R ‚àß (((z, y) ‚àà P) ‚à® (z, y) ‚àà Q)
      := iff_transitivity ((x, y) ‚àà (P ‚à™ Q) ‚àò R) (‚àÉ z, (x, z) ‚àà R ‚àß (z, y) ‚àà P ‚à™ Q) (‚àÉ z, (x, z) ‚àà R ‚àß (((z, y) ‚àà P) ‚à® (z, y) ‚àà Q) )
      (first) (second)
    let h‚ÇÅ : (‚àÉ z, (x, z) ‚àà R ‚àß ((z, y) ‚àà P ‚à® (z, y) ‚àà Q)) ‚Üî ‚àÉ z, ((x, z) ‚àà R ‚àß (z, y) ‚àà P) ‚à® (x, z) ‚àà R ‚àß (z, y) ‚àà Q := exists_congr (fun (z) => conj_disj_distr_left ((x, z) ‚àà R) ((z, y) ‚àà P) ((z, y) ‚àà Q))
    let fourth : (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî (‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P)) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà Q))
      := iff_transitivity ((x, y) ‚àà (P ‚à™ Q) ‚àò R) (‚àÉ z, (x, z) ‚àà R ‚àß (((z, y) ‚àà P) ‚à® (z, y) ‚àà Q) ) (‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P)) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà Q))
      (third) (h‚ÇÅ)
    let fifth : (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî (‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P))) ‚à® (‚àÉ z, ( (x, z) ‚àà R ‚àß (z, y) ‚àà Q)) :=
      iff_subst_pred_arg (fun (s) => (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî s) (‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P)) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà Q)) ((‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P))) ‚à® (‚àÉ z, ( (x, z) ‚àà R ‚àß (z, y) ‚àà Q)))
      (exits_or_prop (fun (z) => (((x, z) ‚àà R) ‚àß ((z, y) ‚àà P))) (fun (z) =>  ( (x, z) ‚àà R ‚àß (z, y) ‚àà Q))) (fourth)
    let sixth : (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî ((x, y) ‚àà (P ‚àò R)) ‚à® ((x, y) ‚àà (Q ‚àò R)) :=
      iff_subst_pred_arg (fun (s) => (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî s) ((‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P))) ‚à® (‚àÉ z, ( (x, z) ‚àà R ‚àß (z, y) ‚àà Q))) (((x, y) ‚àà (P ‚àò R)) ‚à® ((x, y) ‚àà (Q ‚àò R)))
      (disj_congr (‚àÉ z, ((x, z) ‚àà R ‚àß ((z, y) ‚àà P))) ((x, y) ‚àà (P ‚àò R)) ((‚àÉ z, ( (x, z) ‚àà R ‚àß (z, y) ‚àà Q))) ((x, y) ‚àà (Q ‚àò R)) (iff_comm.mp (composition_pair_prop P R x y)) (iff_comm.mp (composition_pair_prop Q R x y))) (fifth)

    iff_subst_pred_arg (fun (s) => (x, y) ‚àà (P ‚à™ Q) ‚àò R ‚Üî s) (((x, y) ‚àà (P ‚àò R)) ‚à® ((x, y) ‚àà (Q ‚àò R))) ((x, y) ‚àà ((P ‚àò R) ‚à™ (Q ‚àò R))) (iff_comm.mp (union2_sets_prop (P ‚àò R) (Q ‚àò R) (x, y))) (sixth)
theorem union_composition_prop_right : ‚àÄ P Q R, ((P ‚à™ Q) ‚àò R) = ((P ‚àò R) ‚à™ (Q ‚àò R))  :=
  fun (P Q R) =>
    relation_equality ((P ‚à™ Q) ‚àò R) ((P ‚àò R) ‚à™ (Q ‚àò R)) (composition_is_rel (P ‚à™ Q) R) (union2_rel_is_rel (P ‚àò R) (Q ‚àò R) (composition_is_rel P R) (composition_is_rel Q R)) (union_composition_pair_prop_right P Q R)
theorem union_composition_pair_prop_left : ‚àÄ P Q R, ‚àÄ x y, (x . (P ‚àò (Q ‚à™ R)) . y) ‚Üî (x . ((P ‚àò Q) ‚à™ (P ‚àò R)) . y) :=
  fun (P Q R x y) =>
    let first: (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî ‚àÉ z, (x, z) ‚àà Q ‚à™ R ‚àß (z, y) ‚àà P  := composition_pair_prop P (Q ‚à™ R) x y

    let second : (‚àÉ z, (x, z) ‚àà (Q ‚à™ R) ‚àß (z, y) ‚àà P) ‚Üî (‚àÉ z, (((x, z) ‚àà Q ‚à® (x, z) ‚àà R) ‚àß ((z, y) ‚àà P))) := exists_congr (fun (z) => and_congr_left' (union2_sets_prop Q R (x, z)))

    let third : (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî (‚àÉ z, (((x, z) ‚àà Q ‚à® (x, z) ‚àà R) ‚àß ((z, y) ‚àà P)))
      := iff_transitivity ((x, y) ‚àà P ‚àò (Q ‚à™ R)) (‚àÉ z, (x, z) ‚àà (Q ‚à™ R) ‚àß (z, y) ‚àà P) (‚àÉ z, (((x, z) ‚àà Q ‚à® (x, z) ‚àà R) ‚àß ((z, y) ‚àà P)))
      (first) (second)

    let h‚ÇÅ : (‚àÉ z, (((x, z) ‚àà Q ‚à® (x, z) ‚àà R) ‚àß ((z, y) ‚àà P))) ‚Üî ‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà P) := exists_congr (fun (z) => conj_disj_distr_right ((z, y) ‚àà P) ((x, z) ‚àà Q) ((x, z) ‚àà R))

    let fourth : (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî ‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà P)
      := iff_transitivity  ((x, y) ‚àà P ‚àò (Q ‚à™ R))  (‚àÉ z, (((x, z) ‚àà Q ‚à® (x, z) ‚àà R) ‚àß ((z, y) ‚àà P))) (‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà P) )
      (third) (h‚ÇÅ)


    let fifth : (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî (‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P)) ‚à® (‚àÉ z, ((x, z) ‚àà R ‚àß (z, y) ‚àà P)) :=
      iff_subst_pred_arg (fun (s) => (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî s) (‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P) ‚à® ((x, z) ‚àà R ‚àß (z, y) ‚àà P))  ((‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P)) ‚à® (‚àÉ z, ((x, z) ‚àà R ‚àß (z, y) ‚àà P)))
      (exits_or_prop (fun (z) => ((x, z) ‚àà Q ‚àß (z, y) ‚àà P)) (fun (z) => ((x, z) ‚àà R ‚àß (z, y) ‚àà P))) (fourth)


    let sixth : (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî ((x, y) ‚àà (P ‚àò Q)) ‚à® ((x, y) ‚àà (P ‚àò R)) :=
      iff_subst_pred_arg (fun (s) => (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî s) ((‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P)) ‚à® (‚àÉ z, ((x, z) ‚àà R ‚àß (z, y) ‚àà P)))  (((x, y) ‚àà (P ‚àò Q)) ‚à® ((x, y) ‚àà (P ‚àò R)))
      (disj_congr (‚àÉ z, ((x, z) ‚àà Q ‚àß (z, y) ‚àà P)) ((x, y) ‚àà (P ‚àò Q)) ((‚àÉ z, ((x, z) ‚àà R ‚àß (z, y) ‚àà P))) ((x, y) ‚àà (P ‚àò R)) (iff_comm.mp (composition_pair_prop P Q x y)) (iff_comm.mp (composition_pair_prop P R x y))) (fifth)

    iff_subst_pred_arg (fun (s) => (x, y) ‚àà P ‚àò (Q ‚à™ R) ‚Üî s) (((x, y) ‚àà (P ‚àò Q)) ‚à® ((x, y) ‚àà (P ‚àò R))) ((x, y) ‚àà ((P ‚àò Q) ‚à™ (P ‚àò R))) (iff_comm.mp (union2_sets_prop (P ‚àò Q) (P ‚àò R) (x, y))) (sixth)
theorem compostion_union_prop_left : ‚àÄ P Q R, P ‚àò (Q ‚à™ R) = (P ‚àò Q) ‚à™ (P ‚àò R) :=
  fun (P Q R) =>
    relation_equality (P ‚àò (Q ‚à™ R)) ((P ‚àò Q) ‚à™ (P ‚àò R)) (composition_is_rel (P) (Q ‚à™ R)) (union2_rel_is_rel (P ‚àò Q) (P ‚àò R) (composition_is_rel P Q) (composition_is_rel P R)) (union_composition_pair_prop_left P Q R)
theorem monotonic_subset_composition_pair_right : ‚àÄ P Q R, P ‚äÜ Q ‚Üí (‚àÄ x y, (x . (P ‚àò R) . y) ‚Üí (x . (Q ‚àò R) . y)) :=
  fun (P Q R) => fun (h : P ‚äÜ Q) =>
    fun (x y) => fun (g : (x . (P ‚àò R) . y)) =>
      let first := Iff.mp (composition_pair_prop P R x y) g
      Exists.elim (first)
      (
        fun (w) =>
          fun (hw : (x . R . w) ‚àß (w . P . y)) =>
            Iff.mpr (composition_pair_prop Q R x y) (Exists.intro w (And.intro (And.left hw) (h (w, y) (And.right hw))))
      )
theorem monotonic_subset_composition_right : ‚àÄ P Q R, P ‚äÜ Q ‚Üí P ‚àò R ‚äÜ Q ‚àò R :=
  fun (P Q R) =>
    fun (h : P ‚äÜ Q) =>
      rel_subset (P ‚àò R) (Q ‚àò R) (composition_is_rel P R) (composition_is_rel Q R) (
        monotonic_subset_composition_pair_right P Q R h
      )

theorem monotonic_subset_composition_pair_left : ‚àÄ P Q R, P ‚äÜ Q ‚Üí (‚àÄ x y, (x . (R ‚àò P) . y) ‚Üí (x . (R ‚àò Q) . y)) :=
  fun (P Q R) => fun (h : P ‚äÜ Q) =>
    fun (x y) => fun (g : (x . (R ‚àò P) . y)) =>
      let first := Iff.mp (composition_pair_prop R P x y) g
      Exists.elim (first)
      (
        fun (w) =>
          fun (hw : (x . P . w) ‚àß (w . R . y)) =>
            Iff.mpr (composition_pair_prop R Q x y) (Exists.intro w (And.intro (h (x, w) (And.left hw)) (And.right hw)))
      )
theorem monotonic_subset_composition_left : ‚àÄ P Q R, P ‚äÜ Q ‚Üí R ‚àò P ‚äÜ R ‚àò Q :=
  fun (P Q R) =>
    fun (h : P ‚äÜ Q) =>
      rel_subset (R ‚àò P) (R ‚àò Q) (composition_is_rel R P) (composition_is_rel R Q) (
        monotonic_subset_composition_pair_left  P Q R h
      )
theorem intersect2_composition_prop_right: ‚àÄ P Q R, (P ‚à© Q) ‚àò R ‚äÜ (P ‚àò R) ‚à© (Q ‚àò R) :=
  fun (P Q R) =>
    fun (x) =>
      fun (h : x ‚àà (P ‚à© Q) ‚àò R) =>
        let first := monotonic_subset_composition_right (P ‚à© Q) P R (And.left (intersect_2sets_subset_prop P Q)) x h
        let second := monotonic_subset_composition_right (P ‚à© Q) Q R (And.right (intersect_2sets_subset_prop P Q)) x h
        Iff.mpr (intersect_2sets_prop (P ‚àò R) (Q ‚àò R) x) (And.intro (first) (second))
theorem intersect2_composition_prop_left: ‚àÄ P Q R, P ‚àò (Q ‚à© R) ‚äÜ (P ‚àò Q) ‚à© (P ‚àò R) :=
  fun (P Q R) =>
    fun (x) =>
      fun (h : x ‚àà (P ‚àò (Q ‚à© R))) =>
        let first := monotonic_subset_composition_left (Q ‚à© R) Q P (And.left (intersect_2sets_subset_prop Q R)) x h
        let second := monotonic_subset_composition_left (Q ‚à© R) R P (And.right (intersect_2sets_subset_prop Q R)) x h
        Iff.mpr (intersect_2sets_prop (P ‚àò Q) (P ‚àò R) x) (And.intro (first) (second))
noncomputable def id_ (A : Set) : Set := {t ‚àà (A √ó A) | ‚àÉ x : Set, t = (x, x)}
theorem id_is_rel : ‚àÄ A, binary_relation (id_ A) :=
  fun (A) =>
    let first := specification_set_subset (fun (u) => ‚àÉ x : Set, u = (x, x)) (A √ó A)
    And.left (prop_then_binary_relation A A (id_ A) (first))
theorem id_prop : ‚àÄ A x y, (x . (id_ A) . y) ‚Üí (((x = y) ‚àß (x ‚àà A)) ‚àß (y ‚àà A)) :=
  fun (A) => fun (x) => fun (y) => fun (h : (x . (id_ A) . y)) =>
    let first := And.right (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ x : Set, u = (x, x)) (A √ó A) (x, y)) h)
    let second := And.left (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ x : Set, u = (x, x)) (A √ó A) (x, y)) h)
    let third := Iff.mp (cartesian_product_pair_prop A A x y) second
    Exists.elim first
    (
      fun (w) =>
        fun (hw : (x, y) = (w, w)) =>
          let fourth := And.left (Iff.mp (ordered_pair_set_prop x y w w) hw)
          let fifth := And.right (Iff.mp (ordered_pair_set_prop x y w w) hw)
          And.intro (And.intro (eq_subst (fun (u) => u = y) w x (Eq.symm fourth) (Eq.symm fifth)) (And.left third)) (And.right third)
    )
theorem prop_then_id : ‚àÄ A, ‚àÄ x ‚àà A; (x . (id_ A) . x) :=
  fun (A) => fun (x) => fun (h : x ‚àà A) =>
    Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ x : Set, u = (x, x)) (A √ó A) (x, x))
     (And.intro (Iff.mpr (cartesian_product_pair_prop A A x x) (And.intro h h)) (Exists.intro x (Eq.refl (x, x))))
theorem inv_id : ‚àÄ A, ((id_ A)‚Åª¬π) = (id_ A) :=
  fun (A) =>
    relation_equality ((id_ A)‚Åª¬π) (id_ A) (inv_is_rel (id_ A) (id_is_rel A)) (id_is_rel A) (fun (x) => fun (y) =>
      Iff.intro
      (
        fun (h : (x . ((id_ A)‚Åª¬π) . y) ) =>
          let first := Iff.mpr (inv_pair_prop (id_ A) (id_is_rel A) y x) h
          let second := And.left (And.left (id_prop A y x first))
          eq_subst (fun (u) => (x . (id_ A) . u)) x y (Eq.symm second) (prop_then_id A x (And.right (id_prop A y x first)))
      )
      (
        fun (h : (x . (id_ A) . y)) =>
          let _ := Iff.mp (inv_pair_prop (id_ A) (id_is_rel A) x y) h
          let second := And.left (And.left (id_prop A x y h))
          eq_subst (fun (u) => (u . ((id_ A)‚Åª¬π) . y)) y x (Eq.symm second) (Iff.mp (inv_pair_prop (id_ A) (id_is_rel A) (y) y) (prop_then_id A y (And.right (id_prop A x y h))))

      )
    )
theorem id_rel_composition_right : ‚àÄ A B R, binary_relation_between A B R ‚Üí (R ‚àò (id_ A)) = R :=
  fun (A B R) => fun (h : binary_relation_between A B R) =>
    relation_equality (R ‚àò id_ A) (R)  (composition_is_rel R (id_ A)) (And.left (prop_then_binary_relation A B R (h)))  (fun (x y) => Iff.intro
    (
      fun (g : ((x . (R ‚àò (id_ A)) . y))) =>
        let first := Iff.mp (composition_pair_prop R (id_ A) x y) g
        Exists.elim first
        (
          fun (w) =>
            fun (hw : (x, w) ‚àà id_ A ‚àß (w, y) ‚àà R) =>
              let _ := id_prop A x w (And.left hw)
              eq_subst (fun (u) => (u, y) ‚àà R) w x (Eq.symm (And.left (And.left (id_prop A x w (And.left hw))))) (And.right hw)
        )

    )
    (
      fun (g : (x . R . y)) =>

        Iff.mpr (composition_pair_prop R (id_ A) x y) (Exists.intro x (And.intro (prop_then_id A x (And.left (Iff.mp (cartesian_product_pair_prop A B x y) (h (x, y) (g))))) (g)))
    )
    )
theorem id_rel_composition_left : ‚àÄ A B  R, binary_relation_between A B R ‚Üí ((id_ B) ‚àò R) = R :=
  fun (A B R) => fun (h : binary_relation_between A B R) =>
    relation_equality (id_ B ‚àò R) (R)  (composition_is_rel (id_ B) (R)) (And.left (prop_then_binary_relation A B R (h)))  (fun (x y) => Iff.intro
    (
      fun (g : ((x . (id_ B ‚àò R) . y))) =>
        let first := Iff.mp (composition_pair_prop (id_ B) (R) x y) g
        Exists.elim first
        (
          fun (w) =>
            fun (hw : (x, w) ‚àà R ‚àß (w, y) ‚àà id_ B) =>
              eq_subst (fun (u) => (x, u) ‚àà R) w y (And.left (And.left (id_prop B w y (And.right hw)))) (And.left hw)
        )

    )
    (
      fun (g : (x . R . y)) =>

        Iff.mpr (composition_pair_prop (id_ B) R x y) (Exists.intro y (And.intro (g) (prop_then_id B y  (
            And.right ( (Iff.mp (cartesian_product_pair_prop A B x y)) (h (x, y) g) )
        ))))
    )
    )
noncomputable def rel_image (X R : Set) := {b ‚àà rng R | ‚àÉ a ‚àà X; (a . R . b)}
syntax  term ".[" term "]" : term
macro_rules
  | `($R:term .[ $X:term ])  => `(rel_image $X $R)
theorem rng_is_rel_image : ‚àÄ R, binary_relation R ‚Üí rng R = R.[dom R] :=
  fun (R) => fun (_ : binary_relation R) =>
    extensionality (rng R) (R.[dom R]) (
      fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà rng R) =>
          let first := Iff.mp (rng_prop R x) h
          Exists.elim (first) (
            fun (w) =>
              fun (hw : (w . R . x)) =>
                let second := Iff.mpr (dom_prop R w) (Exists.intro x (hw))
                let third: ‚àÉ m ‚àà dom R; (m . R . x) := Exists.intro w (And.intro (second) (hw))
                (Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà (dom R) ; (a . R . u)) (rng R) x)) (And.intro (h) (third))
          )
      )
      (
        fun (h : x ‚àà R.[dom R]) =>
        specification_set_subset (fun (u) => ‚àÉ a ‚àà (dom R); (a . R . u)) (rng R) x h
      )
    )
theorem rel_pre_image_eq : ‚àÄ Y R, binary_relation R ‚Üí R‚Åª¬π.[Y] = {a ‚àà dom R | ‚àÉ b ‚àà Y; (a . R . b)} :=
  fun (Y) => fun (R) => fun (g : binary_relation R) =>
    extensionality (R‚Åª¬π.[Y]) ({a ‚àà dom R | ‚àÉ b ‚àà Y; (a . R . b)}) (
      fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà R‚Åª¬π.[Y]) =>
          let first := inv_rng R g
          let second := And.left (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Y; (a . (R‚Åª¬π) . u)) (rng (R‚Åª¬π)) x) h)
          let third := And.right (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Y; (a . (R‚Åª¬π) . u)) (rng (R‚Åª¬π)) x) h)
          let fourth := eq_subst (fun (u) => x ‚àà u) (rng (R‚Åª¬π)) (dom R) (first) (second)
          Exists.elim third
          (
            fun (w) =>
              fun (hw: w ‚àà Y ‚àß (w . (R‚Åª¬π) . x)) =>
                let fifth := Iff.mpr (inv_pair_prop R g x w) (And.right hw)
                let sixth: ‚àÉ b ‚àà Y; (x . R . b) := Exists.intro w (And.intro (And.left hw) (fifth))
                (Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ b ‚àà Y; (u . R . b)) (dom R) x)) (And.intro (fourth) (sixth))

          )

      )
      (
        fun (h : x ‚àà {a ‚àà dom R | ‚àÉ b ‚àà Y; (a . R . b)}) =>
          let first := inv_rng R g
          let second := And.left (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ b ‚àà Y; (u . R . b)) (dom R) x) h)
          let third := And.right (Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ b ‚àà Y; (u . R . b)) (dom R) x) h)
          let fourth := eq_subst (fun (u) => x ‚àà u) (dom R) (rng (R‚Åª¬π)) (Eq.symm first) (second)
          Exists.elim third
          (
            fun (w) =>
              fun (hw : w ‚àà Y ‚àß (x . R . w)) =>
                let fifth := Iff.mp (inv_pair_prop R g x w) (And.right hw)
                let sixth : ‚àÉ a ‚àà Y; (a . (R‚Åª¬π) . x) := Exists.intro w (And.intro (And.left hw) (fifth))
                (Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Y; (a . (R‚Åª¬π) . u)) (rng (R‚Åª¬π)) x)) (And.intro (fourth) (sixth))
          )
      )
    )
theorem dom_preimage : ‚àÄ A B P, binary_relation_between A B P ‚Üí dom P = P‚Åª¬π.[B] :=
  fun (A B P) => fun (h‚ÇÅ : binary_relation_between A B P) =>
    extensionality (dom P) (P‚Åª¬π.[B]) (
      fun (x) =>
        Iff.intro
        (
          fun (s : x ‚àà dom P) =>
            let first := Iff.mp (dom_prop P x) s
            Exists.elim first
            (
              fun (w) =>
                fun (hw : (x, w) ‚àà P) =>
                  let second := rel_pre_image_eq B P (And.left (prop_then_binary_relation A B P h‚ÇÅ))
                  eq_subst (fun (u) => x ‚àà u) (({a ‚àà dom P | ‚àÉ b ‚àà B; (a . P . b)})) (P‚Åª¬π.[B])  (Eq.symm second) (
                    Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ b ‚àà B; (u . P . b)) (dom P) x) (And.intro (s) (Exists.intro w (And.intro (And.right (Iff.mp (cartesian_product_pair_prop A B x w) (h‚ÇÅ (x, w) hw))) (hw))))

                  )

            )

        )
        (
          fun (s : x ‚àà P‚Åª¬π.[B]) =>
            let first := rel_pre_image_eq B P (And.left (prop_then_binary_relation A B P h‚ÇÅ))
            let second:= eq_subst (fun (u) => x ‚àà u) (P‚Åª¬π.[B]) ({a ‚àà dom P | ‚àÉ b ‚àà B; (a . P . b)})  (first) (s)

            specification_set_subset (fun (u) => ‚àÉ b ‚àà B; (u . P . b)) (dom P) x (second)

        )
    )
theorem rel_image_union : ‚àÄ X Y R, binary_relation R ‚Üí R.[X ‚à™ Y] = R.[X] ‚à™ R.[Y] :=
  fun (X) => fun (Y) => fun (R) => fun (_ : binary_relation R) =>
    extensionality (R.[X ‚à™ Y]) (R.[X] ‚à™ R.[Y])
    (
      fun (b) =>
        let first : b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X ‚à™ Y) ‚àß (s . R . b)) :=
          specification_set_is_specification (fun (u) => ‚àÉ a ‚àà (X ‚à™ Y); (a . R . u)) (rng R) (b)

        let second : b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X ‚à® s ‚àà Y) ‚àß (s . R . b)) :=
          iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß u) (‚àÉ s, (s ‚àà X ‚à™ Y) ‚àß (s . R . b)) (‚àÉ s, (s ‚àà X ‚à® s ‚àà Y) ‚àß (s . R . b))
          (exists_congr (fun (z) => and_congr_left' (union2_sets_prop X Y z))) (first)

        let third : b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X ‚àß (s . R . b)) ‚à® (s ‚àà Y ‚àß (s . R . b))) :=
          iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß u) (‚àÉ s, (s ‚àà X ‚à® s ‚àà Y) ‚àß (s . R . b)) (‚àÉ s, (s ‚àà X ‚àß (s . R . b)) ‚à® (s ‚àà Y ‚àß (s . R . b)))
          (exists_congr (fun (z) => conj_disj_distr_right (z . R . b) (z ‚àà X) (z ‚àà Y))) (second)

        let fourth : b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß ((‚àÉ s, (s ‚àà X) ‚àß (s . R . b)) ‚à® (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b))) :=
          iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî b ‚àà rng R ‚àß u) (‚àÉ s, (s ‚àà X ‚àß (s . R . b)) ‚à® (s ‚àà Y ‚àß (s . R . b))) ((‚àÉ s, (s ‚àà X) ‚àß (s . R . b)) ‚à® (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b)))
          (exists_or) (third)

        let fifth : b ‚àà R.[X ‚à™ Y] ‚Üî (b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X) ‚àß (s . R . b))) ‚à® (b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b))) :=
          iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî u) (b ‚àà rng R ‚àß ((‚àÉ s, (s ‚àà X) ‚àß (s . R . b)) ‚à® (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b)))) ((b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X) ‚àß (s . R . b))) ‚à® (b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b))))
          (conj_disj_distr_left (b ‚àà rng R) ((‚àÉ s, (s ‚àà X) ‚àß (s . R . b))) ((‚àÉ s, (s ‚àà Y) ‚àß (s . R . b)))) (fourth)


        let sixth : b ‚àà R.[X ‚à™ Y] ‚Üî (b ‚àà R.[X]) ‚à® (b ‚àà R.[Y]) :=
          iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî u) ((b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X) ‚àß (s . R . b))) ‚à® (b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b)))) ((b ‚àà R.[X]) ‚à® (b ‚àà R.[Y]))
          (disj_congr ((b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà X) ‚àß (s . R . b)))) ((b ‚àà R.[X])) (b ‚àà rng R ‚àß (‚àÉ s, (s ‚àà Y) ‚àß (s . R . b))) (b ‚àà R.[Y])
          (iff_comm.mp (specification_set_is_specification (fun (u) => ‚àÉ s ‚àà X; (s . R . u)) (rng R) b)) (iff_comm.mp
          (specification_set_is_specification (fun (u) => ‚àÉ s ‚àà Y; (s . R . u)) (rng R) b))
          ) (fifth)

        iff_subst_pred_arg (fun (u) => b ‚àà R.[X ‚à™ Y] ‚Üî u) ((b ‚àà R.[X]) ‚à® (b ‚àà R.[Y])) (b ‚àà R.[X] ‚à™ R.[Y])
        (iff_comm.mp (union2_sets_prop (R.[X]) (R.[Y]) b)) (sixth)
    )
theorem rel_preimage_union : ‚àÄ X Y R , binary_relation R ‚Üí R‚Åª¬π.[X ‚à™ Y] = R‚Åª¬π.[X] ‚à™ R‚Åª¬π.[Y] :=
  fun (X Y R) => fun (h : binary_relation R) =>
    rel_image_union X Y (R‚Åª¬π) (inv_is_rel R h)
theorem monotonic_rel_image : ‚àÄ X Y R, binary_relation R ‚Üí X ‚äÜ Y ‚Üí R.[X] ‚äÜ R.[Y] :=
  fun (X Y R) => fun (_ : binary_relation R) => fun (g : X ‚äÜ Y) =>
    fun (x) => fun (s : x ‚àà R.[X]) =>
      let first := Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà X; (a . R . u)) (rng R) x) s
      Exists.elim (And.right (first))
      (
        fun (w) =>
          fun (hw : w ‚àà X ‚àß (w . R . x)) =>
            let second := g w (And.left hw)
            (Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Y; (a . R . u)) (rng R) x)) (And.intro (And.left first) (Exists.intro w (And.intro (second) (And.right hw))))
      )
theorem monotonic_rel_preimage : ‚àÄ X Y R, binary_relation R ‚Üí X ‚äÜ Y ‚Üí R‚Åª¬π.[X] ‚äÜ R‚Åª¬π.[Y] :=
  fun (X Y R) => fun (h : binary_relation R) => fun (g : X ‚äÜ Y) =>
    monotonic_rel_image X Y (R‚Åª¬π) (inv_is_rel R h) g
theorem lemma_subset_intersec : ‚àÄ A B C, A ‚äÜ B ‚Üí A ‚äÜ C ‚Üí A ‚äÜ (B ‚à© C) :=
  fun (A B C) => fun (h : A ‚äÜ B) => fun (g : A ‚äÜ C) =>
    fun (x) => fun (t : x ‚àà A) =>
      Iff.mpr (intersect_2sets_prop B C x) (And.intro (h x t) (g x t))
theorem rel_image_inter : ‚àÄ X Y R, binary_relation R ‚Üí R.[X ‚à© Y] ‚äÜ (R.[X] ‚à© R.[Y]) :=
  fun (X Y R) => fun (h : binary_relation R) =>
    let first := And.left (intersect_2sets_subset_prop X Y)
    let second := monotonic_rel_image (X ‚à© Y) X R h first
    let third := And.right (intersect_2sets_subset_prop X Y)
    let fourth := monotonic_rel_image (X ‚à© Y) Y R h third
    lemma_subset_intersec (R.[X ‚à© Y]) (R.[X]) (R.[Y]) (second) (fourth)
theorem rel_preimage_inter : ‚àÄ X Y R, binary_relation R ‚Üí R‚Åª¬π.[X ‚à© Y] ‚äÜ (R‚Åª¬π.[X] ‚à© R‚Åª¬π.[Y]) :=
  fun (X Y R) => fun (h : binary_relation R) =>
  rel_image_inter X Y (R‚Åª¬π) (inv_is_rel R (h))
theorem rel_image_composition : ‚àÄ P Q X, (P ‚àò Q).[X] = P.[Q.[X]] :=
  fun (P Q X) =>
    extensionality ((P ‚àò Q).[X]) (P.[Q.[X]]) (
      fun (c) =>

        let first: c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß (‚àÉ a ‚àà X; (a . (P ‚àò Q) . c))
          := specification_set_is_specification (fun (u) => ‚àÉ a ‚àà X; (a . (P ‚àò Q) . u)) (rng (P ‚àò Q)) c

        let second : c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß (‚àÉ a ‚àà X; (‚àÉ b, (a . Q . b) ‚àß (b . P . c))) :=
          iff_subst_pred_arg (fun (u) => c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß u) (‚àÉ a ‚àà X; (a . (P ‚àò Q) . c))  (‚àÉ a ‚àà X; (‚àÉ b, (a . Q . b) ‚àß (b . P . c)))
          (exists_congr (fun (a) => and_congr_right' (composition_pair_prop P Q a c))) (first)

        let third : c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß ‚àÉ a, ‚àÉ b, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c)) :=
          iff_subst_pred_arg (fun (u) => c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß u) ((‚àÉ a ‚àà X; (‚àÉ b, (a . Q . b) ‚àß (b . P . c)))) ( ‚àÉ a, ‚àÉ b, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c)))
          (exists_congr (fun (_) => iff_comm.mp (exists_and_left))) (second)

        let fourth : c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß ‚àÉ b, ‚àÉ a, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c)) :=
          iff_subst_pred_arg (fun (u) => c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß u) ( ‚àÉ a, ‚àÉ b, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c))) (‚àÉ b, ‚àÉ a, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c)))
          (exists_comm) (third)

        let fifth : c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß ‚àÉ b, ‚àÉ a, (((a ‚àà X ‚àß (a . Q . b))) ‚àß (b . P . c)) :=
          iff_subst_pred_arg (fun (u) => c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß u) (‚àÉ b, ‚àÉ a, (a ‚àà X ‚àß (a . Q . b) ‚àß (b . P . c)) ) (‚àÉ b, ‚àÉ a, (((a ‚àà X ‚àß (a . Q . b))) ‚àß (b . P . c)))
          (exists_congr (fun (_) => exists_congr (fun (_) => iff_comm.mp and_assoc))) (fourth)

        let sixth : c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß ‚àÉ b, (‚àÉ a, (a ‚àà X ‚àß (a . Q . b))) ‚àß (b . P . c) :=
          iff_subst_pred_arg (fun (u) => c ‚àà (P ‚àò Q).[X] ‚Üî c ‚àà rng (P ‚àò Q) ‚àß u) (‚àÉ b, ‚àÉ a, (((a ‚àà X ‚àß (a . Q . b))) ‚àß (b . P . c))) (‚àÉ b, (‚àÉ a, (a ‚àà X ‚àß (a . Q . b))) ‚àß (b . P . c))
          (exists_congr (fun (_) => exists_and_right)) (fifth)

        Iff.intro
        (
          fun (h : c ‚àà (P ‚àò Q).[X]) =>
            let h‚ÇÅ := Iff.mp sixth h
            let _ := And.left h‚ÇÅ
            let h‚ÇÉ := And.right h‚ÇÅ
            Exists.elim h‚ÇÉ
            (
              fun (w) =>
                fun (hw : (‚àÉ a, (a ‚àà X ‚àß (a . Q . w))) ‚àß (w . P . c)) =>
                  Exists.elim (And.left hw)
                  (
                    fun (u) =>
                      fun (hu : u ‚àà X ‚àß (u . Q . w)) =>
                        let h‚ÇÑ := Iff.mpr (rng_prop Q w)  (Exists.intro u (And.right hu))
                        let h‚ÇÖ : w ‚àà Q.[X] := Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà X; (a . Q . u)) (rng Q) w) (And.intro (h‚ÇÑ) (Exists.intro u (And.intro (And.left hu) (And.right (hu)))))
                        let h‚ÇÜ := Iff.mpr (rng_prop P c) (Exists.intro w (And.right hw))
                        let h‚Çá : c ‚àà P.[Q.[X]] := (Iff.mpr (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Q.[X]; (a . P . u)) (rng P) c)) (And.intro (h‚ÇÜ) (Exists.intro w (And.intro (h‚ÇÖ)  (And.right hw))))
                        h‚Çá
                  )


            )

        )
        (
          fun (h : c ‚àà P.[Q.[X]]) =>
            let h‚ÇÅ := Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà Q.[X]; (a . P . u)) (rng P) c) h
            let _ := And.left h‚ÇÅ
            let h‚ÇÉ := And.right h‚ÇÅ
            Exists.elim h‚ÇÉ
            (
              fun (w) =>
                fun (hw : w ‚àà Q.[X] ‚àß (w . P . c)) =>
                  let h‚ÇÑ := Iff.mp (specification_set_is_specification (fun (u) => ‚àÉ a ‚àà X; (a . Q . u)) (rng Q) w) (And.left hw)
                  Exists.elim (And.right h‚ÇÑ)
                  (
                    fun (u) =>
                      fun (hu : u ‚àà X ‚àß (u . Q . w)) =>
                        (Iff.mpr (sixth)) (And.intro (Iff.mpr (rng_prop (P ‚àò Q) c) (Exists.intro u ( (Iff.mpr (composition_pair_prop P Q u c)) (Exists.intro w (And.intro (And.right hu) (And.right hw))))))
                         (Exists.intro w (And.intro (Exists.intro u (hu)) (And.right hw)))
                        )
                  )
            )
        )

    )
theorem rel_preimage_composition : ‚àÄ P Q X, binary_relation P ‚Üí binary_relation Q ‚Üí (P ‚àò Q)‚Åª¬π.[X] = Q‚Åª¬π.[P‚Åª¬π.[X]] :=
  fun (P Q X) => fun (h : binary_relation P) => fun (g : binary_relation Q) =>
    let first : (P ‚àò Q)‚Åª¬π.[X] = (Q‚Åª¬π ‚àò P‚Åª¬π).[X] :=
      eq_subst (fun (u) => (P ‚àò Q)‚Åª¬π.[X] = u.[X]) ((P ‚àò Q)‚Åª¬π) (Q‚Åª¬π ‚àò P‚Åª¬π) (inv_composition_prop P Q h g) (Eq.refl ((P ‚àò Q)‚Åª¬π.[X]))

    eq_subst (fun (u) => (P ‚àò Q)‚Åª¬π.[X] = u) ((Q‚Åª¬π ‚àò P‚Åª¬π).[X]) (Q‚Åª¬π.[P‚Åª¬π.[X]]) (rel_image_composition (Q‚Åª¬π) (P‚Åª¬π) X) (first)